#pragma checksum "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eb1298b50141139e60850272e42019f3cbc94be6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_GoodsReceiptPO_CreatePO), @"mvc.1.0.view", @"/Views/GoodsReceiptPO/CreatePO.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\VB\BarCode-System\BarCodeClientService\Views\_ViewImports.cshtml"
using BarCodeClientService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\VB\BarCode-System\BarCodeClientService\Views\_ViewImports.cshtml"
using BarCodeClientService.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eb1298b50141139e60850272e42019f3cbc94be6", @"/Views/GoodsReceiptPO/CreatePO.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"231de61c7d9a254eb8b39190aacae46b82b7984c", @"/Views/_ViewImports.cshtml")]
    public class Views_GoodsReceiptPO_CreatePO : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/jquery.dataTables.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/rowReorder.dataTables.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/tengkimleang/goodReceiptPO/Style.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/jquery-3.3.1.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/dataTables.rowReorder.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/tengkimleang/goodReceiptPO/GetMasterGoodReceiptPO.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/tengkimleang/Method/MethodDataTable.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/Array.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/tengkimleang/goodReceiptPO/Service/IEventCopyFromPO.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/tengkimleang/goodReceiptPO/Service/EventCopyFromPO.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/tengkimleang/goodReceiptPO/Service/IEventItemAdd.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/tengkimleang/goodReceiptPO/Service/EventAddItemService.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/tengkimleang/goodReceiptPO/Service/IEventSaveGoodReceipt.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/tengkimleang/goodReceiptPO/Service/EventSaveGoodReceiptService.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/tengkimleang/goodReceiptPO/CreatePO.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
  
    ViewData["Title"] = "Create GoodReceiptPO";
    var dt = DateTime.Now;
    ViewData["Date"] = dt.ToShortDateString();

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "eb1298b50141139e60850272e42019f3cbc94be610670", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "eb1298b50141139e60850272e42019f3cbc94be611785", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "eb1298b50141139e60850272e42019f3cbc94be612900", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be613932", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be614972", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be616012", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
            WriteLiteral(@"<link href=""https://fonts.googleapis.com/icon?family=Material+Icons"" rel=""stylesheet"">
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"">

<style>
    tr.selected {
        background: red;
        color: red;
    }

    #main {
        position: absolute;
    }

    .color_tap {
        background-color: #5f95c3;
        color: #ffffff;
        font-weight: 600;
        margin-right: 1px;
        min-width: 60px;
    }

    .nav-tabs .nav-link {
        border: 1px solid rgb(193, 193, 193);
        border-radius: 0px 12px 0px 0px;
        height: 40px;
        line-height: 20px;
    }

    .modal {
        z-index: 200000;
    }

    .modal-header {
        background: #5f95c3;
        color: #ffffff;
        height: 40px;
    }

        .modal-header b {
            margin-top: -10px;
        }

    #TbAR table tr td {
        height: 35px;
        margin-left: 15px;
        margin-top: 10px;
       ");
            WriteLiteral(@" padding: 0px !important;
        position: relative !important;
        /*background-color: none;*/
    }

    table tbody tr td {
        background-color: #ffffff;
        color: black;
    }

    table tbody tr.selected td {
        background: #94d8e1;
        color: red;
    }

        table tbody tr.selected td .clsinput {
            background: #94d8e1;
            color: red;
        }

    .clsinput:focus {
        outline: none;
    }

    .hrnew4 {
        border: 1px solid black;
    }

    /* =================================================== */
    .cover-spin {
        position: fixed;
        width: 100%;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background-color: rgba(255,255,255,0.7);
        z-index: 9999;
        display: none;
    }

    ");
            WriteLiteral("@-webkit-keyframes spin {\r\n        from {\r\n            -webkit-transform: rotate(0deg);\r\n        }\r\n\r\n        to {\r\n            -webkit-transform: rotate(360deg);\r\n        }\r\n    }\r\n\r\n    ");
            WriteLiteral(@"@keyframes spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }

    .cover-spin::after {
        content: '';
        display: block;
        position: absolute;
        left: 48%;
        top: 40%;
        width: 40px;
        height: 40px;
        border-style: solid;
        border-color: black;
        border-top-color: transparent;
        border-width: 4px;
        border-radius: 50%;
        -webkit-animation: spin .8s linear infinite;
        animation: spin .8s linear infinite;
    }
    /* =================================================== */

</style>

<div id=""#main"">

    <div id=""frmLoading"" class=""cover-spin"" style=""display:none""></div>

    <div class=""row"" style=""color: #696969; margin-left: 5px; margin-top: 5px;"">
        <h5 style=""color: #696969; margin-top: 5px;"">
            <a onclick=""return confirm('Unsaved data will be lost. Do you want to continue without saving");
            WriteLiteral(@"?')""><i class=""fas fa-home""></i> Dashboard</a>
            <span>
                <a onclick=""return confirm('Unsaved data will be lost. Do you want to continue without saving?')""><i class=""fa fa-caret-right align-right""></i><label style=""font-size:18px;font-weight:500"">Goods Receipt PO</label></a>
                <i class=""fa fa-caret-right align-right""></i>
            </span><label style=""font-size:18px;font-weight:500"">Create Goods Receipt PO</label>

        </h5>
    </div>
    <hr />
    <div style=""color: #696969; padding: 10px;"">
        <ul class=""nav nav-tabs Tap-PA"" id=""mytab"" role=""tablist"">
            <li class=""nav-item"">
                <a class=""nav-link active color_tap"" id=""cus-tab"" data-toggle=""tab"" href=""#cus"" role=""tab"" aria-controls=""Customer"" aria-selected=""true""><label style=""font-size:18px;font-weight:500"">Customer</label></a>
            </li>
            <li class=""nav-item"">
                <a class=""nav-link color_tap"" id=""item-tab"" data-toggle=""tab"" href=""#item"" ");
            WriteLiteral(@"role=""tab"" aria-controls=""Items"" aria-selected=""false""><label style=""font-size:18px;font-weight:500"">Items</label></a>
            </li>
        </ul>
        <div class=""tab-content"" id=""myTabContent"">
            <div class=""tab-pane fade show active"" id=""cus"" role=""tabpanel"" aria-labelledby=""cus-tab"" style=""margin-top: 10px"">
                <div class=""row"">
                    <div class=""col-sm-6"">
                        <div>
                            <label style=""font-size:18px;font-weight:500"">Vendor Code :</label>
                            <div class=""input-group"">
                                <div class=""input-group-prepend"">
                                    <button class=""input-group-text"" id=""CcusID"">
                                        <i class=""fa fa-check""></i>
                                    </button>
                                </div>
                                <input type=""text"" class=""form-control"" placeholder=""Search Code"" id=""CusID""");
            BeginWriteAttribute("value", " value=\"", 5834, "\"", 5842, 0);
            EndWriteAttribute();
            WriteLiteral(@" readonly>
                                <div class=""input-group-append"">
                                    <button class=""input-group-text btnModelsCus"" data-toggle=""modal"" data-target=""#ModalCusCode"">
                                        <i class=""fa fa-search""></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div>
                            <label style=""font-size:18px;font-weight:500"">Vender Name :</label>
                            <div class=""input-group"">
                                <input type=""text"" class=""form-control"" id=""CusName""");
            BeginWriteAttribute("value", " value=\"", 6545, "\"", 6553, 0);
            EndWriteAttribute();
            WriteLiteral(@" readonly>
                            </div>
                        </div>

                        <div class=""nav navbar-nav mr-auto"">
                            <div class=""btn-group"">
                                <button class=""btn btn-info"" id=""CopyFromPO"" data-toggle=""modal"" data-target=""#ModalCopyFromPO"" disabled>
                                    Select PO
                                </button>
                            </div>
                        </div>

                        Order Number :
                        <div class=""input-group"">
                            <input type=""text"" class=""form-control"" id=""OrderNumberID"">
                        </div>
                        Remarks :
                        <div class=""input-group"">
                            <textarea class=""form-control"" id=""Remark"" rows=""3""></textarea>
                        </div>
                    </div>
                    <div class=""col-sm-6"">
                        <div>
  ");
            WriteLiteral(@"                          Series :
                            <div class=""input-group"">
                                <select id=""SeriesID"" class=""form-control"">
                                </select>
                            </div>
                        </div>
                        <div>
                            Posting Date :
                            <div class=""input-group"">
                                <input type=""date"" class=""form-control"" id=""DocDate"">
                            </div>
                        </div>
                        <div>
                            Document Date :
                            <div class=""input-group"">
                                <input type=""date"" class=""form-control"" id=""DocumentDate"">
                            </div>
                        </div>
                        <div>
                            BP Currency :
                            <div class=""input-group"">
                                <select ");
            WriteLiteral(@"class=""form-control"" id=""BPDocCurr""></select>
                            </div>
                        </div>
                        Sales Employees :
                        <div class=""input-group"">
                            <select class=""form-control"" id=""SaleEmp""></select>
                        </div>

                    </div>
                </div>
            </div>

            <div class=""tab-pane fade"" id=""item"" role=""tabpanel"" aria-labelledby=""item-tab"" style=""margin-top: 10px;"">

                <div>
                    Add More Item
                    <button class=""btn btn-info"" id=""btnShowAddItemBar"" style=""background:#f0eff1;color:#696969"" onclick=""shAddItemBar()"">
                        <i class=""fa fa-window-minimize"" aria-hidden=""true""></i>
                    </button>
                </div>

                <div class=""row"" id=""DivBarAddItem"" style=""display: none;"">
                    <div class=""row"">
                        <div class=""col-sm-6"">
   ");
            WriteLiteral(@"                         <input type=""hidden"" id=""itemManage"" />
                            Item Code -:
                            <div class=""input-group"">
                                <div class=""input-group-prepend"">
                                    <button class=""input-group-text"" id=""CItemCode"">
                                        <i class=""fa fa-check""></i>
                                    </button>
                                </div>
                                <input type=""text"" class=""form-control"" placeholder=""Search Code"" id=""ItemCode"">
                                <div class=""input-group-append"">
                                    <button class=""input-group-text btnModelsItem"" data-toggle=""modal"" data-target=""#ModalItem"">
                                        <i class=""fa fa-search""></i>
                                    </button>
                                </div>
                            </div>
                            Item Descrition :
  ");
            WriteLiteral(@"                          <div class=""input-group"">
                                <input type=""text"" class=""form-control"" id=""ItemDescr"" readonly>
                            </div>
                            Quantity :
                            <div class=""input-group"">
                                <input type=""number"" class=""form-control"" value=""1"" id=""Qty"" onchange=""QtyChange()"">
                            </div>

                            <div>
                                Unit Price :
                                <div class=""input-group"">
                                    <div class=""input-group-prepend"">
                                        <input type=""button"" class=""input-group-text"" id=""DocCurr"" />
                                    </div>
                                    <input type=""number"" class=""form-control"" id=""Price"" value=""0"">
                                </div>
                            </div>

                            <div>
              ");
            WriteLiteral(@"                  Discount(%) :
                                <div class=""input-group"">
                                    <input type=""number"" class=""form-control"" value=""0"" id=""Discount"" onchange=""DisCountPerChange()"">
                                </div>
                                Discount Amount :
                                <div class=""input-group"">
                                    <input type=""number"" class=""form-control"" value=""0"" id=""DiscountAmt"" onchange=""DisAmtChange()"">
                                </div>
                            </div>

                        </div>

                        <div class=""col-sm-6"">
                            <div>
                                Bar Code :
                                <div class=""input-group"">
                                    <input type=""text"" class=""form-control"" id=""BarCode""");
            BeginWriteAttribute("onchange", " onchange=\"", 12570, "\"", 12581, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                                </div>
                            </div>
                            <div>
                                VAT Code :
                                <div class=""input-group"">
                                    <select id=""TaxCode"" class=""form-control"">
                                    </select>
                                </div>
                            </div>
                            <div>
                                Warehouse :
                                <div class=""input-group"">
                                    <select id=""whscode"" class=""form-control"">
                                    </select>
                                </div>
                            </div>
                            <div>
                                Uom Name :
                                <div class=""input-group"">
                                    <select id=""UomID"" class=""form-control"">
                                    </select>");
            WriteLiteral(@"
                                </div>
                            </div>
                            <div>
                                Total :
                                <div class=""input-group"">
                                    <input type=""number"" class=""form-control"" value=""0"" id=""totalItem"" disabled>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class=""row"" style=""padding: 15px;"">
                        <div class=""nav navbar-nav ml-auto"">
                            <button class=""btn btn-info"" id=""AddItem"" style=""background: #f0eff1; color: #696969"">Add Item</button>
                        </div>
                    </div>
                </div>

                <hr class=""hrnew4"">
                <div class=""row"">
                    <div class=""col-sm-12"">
                        <div class=""table-responsive"">
                            <table id=""TbAR""");
            WriteLiteral(@" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;"">
                                <thead>
                                    <tr>
                                        <th>BatchOrSerial</th>
                                        <th>ItemCode</th>
                                        <th>UnitPrice</th>
                                        <th>Discount(%)</th>
                                        <th>Dis.Amount</th>
                                        <th>Qty</th>
                                        <th>Price Before Discount</th>
                                        <th>Line Total</th>
                                        <th>Uom Name</th>
                                        <th>TaxCode</th>
                                        <th>Warehouse</th>
                                        <th>Command</th>
                                    </tr>
                             ");
            WriteLiteral(@"   </thead>
                            </table>
                        </div>
                    </div>
                </div>

                <div class=""row"" style=""margin-top: 5px;"">
                    <div class=""col-sm-4"">
                    </div>
                    <div class=""col-sm-4"">
                        Discount % :
                        <input type=""number"" class=""form-control"" value=""0"" id=""DisPer"" />
                        Discount Amount :
                        <input type=""number"" class=""form-control"" value=""0"" id=""DisAmt"" />
                    </div>
                    <div class=""col-sm-4"">
                        Before Discount :
                        <input class=""form-control"" readonly id=""BTax"" />
                        Discount By Items :
                        <input class=""form-control"" readonly id=""DisA"" />
");
            WriteLiteral(@"                        <input class=""form-control d-none"" readonly id=""Tax"" />
                        <input class=""d-none"" id=""TaxBeforeDis"" />
                        Total Amount :
                        <input class=""form-control"" readonly id=""Total"" />
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class=""row"" style=""margin-bottom: -20px; margin-top: -20px; padding: 15px;"">
            <div class=""nav navbar-nav mr-auto"">
                <div class=""btn-group"">
");
            WriteLiteral(@"                    <button class=""btn btn-info"" id=""CopyToGoodReturn"" style=""background: #f0eff1; color: #696969;""
                            data-toggle=""modal"" data-target=""#ModalCopyToGoodReturn"" disabled>
                        Copy To Good Return
                    </button>
                </div>
            </div>
            <div class=""nav navbar-nav ml-auto"">
                <div class=""btn-group"">
");
            WriteLiteral("                    <button class=\"btn btn-warning\" id=\"Save\" style=\"margin-left: 5px; font-weight:bold\">Send SAP</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <hr />\r\n</div>\r\n\r\n");
            WriteLiteral(@"<div class=""modal modal-backdrop"" id=""Modalloder"" role=""dialog"" data-backdrop=""static"">
    <div class=""modal-dialog modal-dialog-centered modal-sm"">
        <div class=""modal-content"" style=""background: #f0eff1; color: #696969;"">
            <div class=""modal-body"">
                <div class=""text-center"">
                    <div class=""spinner-border text-primary"" role=""status"">
                        <span class=""sr-only"">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class=""modal"" id=""ModalSuccess"" role=""dialog"" data-backdrop=""static"">
    <div class=""modal-dialog modal-dialog-centered modal-sm"">
        <div class=""modal-content"" style=""background: #f0eff1; color: #696969;"">
            <div class=""modal-header"">
                <b>Information</b>
            </div>
            <div class=""modal-body"">
                <p id=""ErrMsg""> - </p>
            </div>
            <div class=""modal-footer"">
  ");
            WriteLiteral("              <button class=\"btn-sm btn-success\" data-dismiss=\"modal\" style=\"color: #696969;\">OK</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalCusCode"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background: #f0eff1; color: #696969;"">
            <div class=""modal-header"">
                <b>List of Customer</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <table id=""TbCusCode"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;"">
                                <thead>
                                    <tr>
                                        <th>Customer Code</th>
                                        <th>Cusetomer Name</th>
                                        <th>Phone</th>
                                        <th>Address</th>
                                    </tr>
                       ");
            WriteLiteral(@"         </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""ChooseCus"" style=""background: #f0eff1; color: #696969;"">Choose</button>
                <button class=""btn btn-info"" data-dismiss=""modal"" style=""background: #f0eff1; color: #696969;"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalItem"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background: #f0eff1; color: #696969;"">
            <div class=""modal-header"">
                <b>List of Items</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <table id=""TbItem"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;"">
                                <thead>
                                    <tr>
                                        <th>Item Code</th>
                                        <th>Item Descrition</th>
                                        <th>Unit Price</th>
                                        <th>In Stock</th>
                                        <th>BarCode</th>
              ");
            WriteLiteral(@"                      </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""ChooseItem"" style=""background: #f0eff1; color: #696969;"">Choose</button>
                <button class=""btn btn-info"" data-dismiss=""modal"" style=""background: #f0eff1; color: #696969;"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalCopyFromPO"" data-backdrop=""static"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background: #f0eff1; color: #696969;"">
            <div class=""modal-header"">
                <b>Purchase Order</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <table id=""TbCopyFromPO"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;"">
                                <thead>
                                    <tr>
                                        <th>Receipt No(SAP)</th>
                                        <th>Vendor Name</th>
                                        <th>Document Date</th>
                                        <th>DocTotal</th>
                               ");
            WriteLiteral(@"         <th>Document Status</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""ChoosePO"" style=""background: #f0eff1; color: #696969;"">Choose</button>
                <button class=""btn btn-info"" data-dismiss=""modal"" style=""background: #f0eff1; color: #696969;"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalCopyToGoodReturn"" data-backdrop=""static"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background: #f0eff1; color: #696969;"">
            <div class=""modal-header"">
                <b>Good Return</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <table id=""TbCopyToGoodReturn"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;"">
                                <thead>
                                    <tr>
                                        <th>Receipt No(SAP)</th>
                                        <th>Vendor Name</th>
                                        <th>Document Date</th>
                                        <th>DocTotal</th>
                      ");
            WriteLiteral(@"                  <th>Document Status</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""ChooseGoodReceiptPO"" style=""background: #f0eff1; color: #696969;"">Choose</button>
                <button class=""btn btn-info"" data-dismiss=""modal"" style=""background: #f0eff1; color: #696969;"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade "" id=""ModalBarCodeSerail"" data-backdrop=""static"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background: #f0eff1; color: #696969;"">
            <div class=""modal-header"">
                <b>Serial Numbers - Setup</b>
            </div>
            <div class=""modal-body"">
                <div class=""container"">
                    <div class=""row"">
                        <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                            <input type=""hidden"" id=""txtRowID"" />
                            <input type=""hidden"" id=""txtScriptID"" />
                            Item Code :
                            <div class=""input-group"">
                                <input type=""text"" class=""form-control"" id=""ItemCodeSerial"" disabled=""disabled"">
                            </div>
                        </div>
                        <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                            QTY :
  ");
            WriteLiteral(@"                          <div class=""input-group"">
                                <input type=""number"" class=""form-control"" id=""ItemCodeSerialQty"" readonly=""readonly"">
                            </div>
                        </div>
                    </div>
");
            WriteLiteral(@"                    <div class=""row"">
                        <div class=""col-12"">
                            Serial Number :
                            <div class=""row"">
                                <div class=""col-12 col-sm-12 col-md-12 col-lg-8 BatNumberPadding"">
                                    <div class=""input-group"">
                                        <input type=""text"" class=""form-control"" id=""SerialNumber"" autocomplete=""off"">
                                    </div>
                                </div>
                                <div class=""col-12 col-sm-12 col-md-12 col-lg-4 BatNumberPadding"">
                                    <div class=""input-group"">
");
            WriteLiteral("                                        <select class=\"form-control\" id=\"optSerialType\" onchange=\"SerialChangeType()\">");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be646132", async() => {
                WriteLiteral("Standard");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be647259", async() => {
                WriteLiteral("Advance");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("</select>\r\n                                        <button class=\"input-group-text\" id=\"btnSerialNumGennerate\"><i class=\"fa fa-file-medical\"></i>&nbsp; Generate</button>\r\n");
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id=""DisPlayCustomizeSerial"" style=""display: none;"">
                        <div class=""row"">
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-5"">
                                Total Generate Serial :
                                <div class=""input-group"">
                                    <input type=""number"" class=""form-control"" id=""txtTotalGenSerial"">
                                </div>
                            </div>
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-5"">
                                Per Serial Unit :
                                <div class=""input-group"">
                                    <input type=""number"" value=""1"" class=""form-control"" id=""txtPerSerial"" disabled=""disabled"">
                                ");
            WriteLiteral(@"</div>
                            </div>
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-2"">
                                Total Qty:
                                <div class=""input-group"">
                                    <input type=""text"" class=""form-control"" disabled id=""txtTotalQtyGenSerial"">
                                </div>
                            </div>
                        </div>
                        <div class=""row"">
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                                Serial No. From :
                                <div class=""input-group"">
                                    <select class=""form-control"" id=""optSerialFrom"">
                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be650540", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                    </select>
                                </div>
                            </div>
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                                Serial No. To :
                                <div class=""input-group"">
                                    <select class=""form-control"" id=""optSerialTo"">
                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be651899", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                            Mfr Serial No. :
                            <div class=""input-group"">
                                <input type=""text"" class=""form-control"" id=""txtManfrSerial"" autocomplete=""off"">
                            </div>
                        </div>
                        <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                            Exp Date :
                            <div class=""input-group"">
                                <input type=""date"" class=""form-control"" id=""txtExpireDate"">
                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-6""></");
            WriteLiteral(@"div>
                        <div class=""col-6"">
                            <button class=""btn btn-success float-right mt-4 mb-4"" id=""BtnSaveSerial1"">Save</button>
                        </div>
                    </div>
                </div>

                <div id=""DisPlayCustomizeTableSerial"" style=""display: none;"">
                    <div class=""table-responsive"">
                        <div class=""row"">
                            <div class=""col-12"">
                                <table id=""tmpSerial"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;"">
                                    <thead>
                                        <tr>
                                            <th>Batch From</th>
                                            <th>Batch To</th>
                                            <th>Mfr Serial No.</th>
                                            <th>Expire Date</th>");
            WriteLiteral(@"
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-12"">
                            <table id=""TbSerial"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;"">
                                <thead>
                                    <tr>
                                        <th>Serial Number</th>
                                        <th>Mfr Serial No.</th>
                                        <th>Expiration Date</th>
                                        <th>Action</th>
                                    </tr>
    ");
            WriteLiteral(@"                            </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-danger"" id=""btnCLoseSerial"" data-dismiss=""modal"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade "" id=""ModalBarCodeBatch"" data-backdrop=""static"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background: #f0eff1; color: #696969;"">
            <div class=""modal-header"">
                <b>Batch Numbers - Setup</b>
            </div>
            <div class=""modal-body"">
                <div class=""container"">
                    <div class=""row"">
                        <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                            <input type=""hidden"" id=""txtRowIDBatch"" />
                            <input type=""hidden"" id=""txtIDRowB"" />
                            <input type=""hidden"" id=""txtScriptIDBatch"" />
                            Item Code :
                            <div class=""input-group"">
                                <input type=""text"" class=""form-control"" id=""ItemCodeBatch"" disabled=""disabled"">
                            </div>
                        </div>
                        <div class=""c");
            WriteLiteral(@"ol-12 col-sm-12 col-md-12 col-lg-6"">
                            QTY :
                            <div class=""input-group"">
                                <input type=""number"" class=""form-control"" id=""ItemCodeBatchQty"" readonly=""readonly"">
                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-12"">
                            Batch Number :
                            <div class=""row"">
                                <div class=""col-12 col-sm-12 col-md-12 col-lg-8 BatNumberPadding"">
                                    <div class=""input-group"">
                                        <input type=""text"" class=""form-control"" id=""BatchNumber"" autocomplete=""off"">
                                    </div>
                                </div>
                                <div class=""col-12 col-sm-12 col-md-12 col-lg-4 BatNumberPadding"">
                                    <div ");
            WriteLiteral("class=\"input-group\">\r\n");
            WriteLiteral("                                        <select class=\"form-control\" id=\"optBatchType\" onchange=\"BatchChangeType()\">");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be658840", async() => {
                WriteLiteral("Standard");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be659967", async() => {
                WriteLiteral("Advance");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("</select>\r\n                                        <button class=\"input-group-text\" id=\"btnBatchNumGennerate\"><i class=\"fa fa-file-medical\"></i>&nbsp; Generate</button>\r\n");
            WriteLiteral(@"                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id=""DisPlayCustomize"" style=""display: none;"">
                        <div class=""row"">
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-5"">
                                Total Generate Batch :
                                <div class=""input-group"">
                                    <input type=""number"" class=""form-control"" id=""txtTotalGenBatch"">
                                </div>
                            </div>
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-5"">
                                Per Batch Unit :
                                <div class=""input-group"">
                                    <input type=""number"" class=""form-control"" id=""txtPerBatch"">
                                </div>
                            </di");
            WriteLiteral(@"v>
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-2"">
                                Total Qty:
                                <div class=""input-group"">
                                    <input type=""text"" class=""form-control"" disabled id=""txtTotalQtyGenBatch"">
                                </div>
                            </div>
                        </div>
                        <div class=""row"">
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                                Batch No. From :
                                <div class=""input-group"">
                                    <select class=""form-control"" id=""optBatchFrom"">
                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be663200", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                    </select>
                                </div>
                            </div>
                            <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                                Batch No. To :
                                <div class=""input-group"">
                                    <select class=""form-control"" id=""optBatchTo"">
                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be664557", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                            Mfr Date. :
                            <div class=""input-group"">
                                <input type=""date"" class=""form-control"" id=""dtpMfrDateBatch"">
                            </div>
                        </div>
                        <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                            Exp Date :
                            <div class=""input-group"">
                                <input type=""date"" class=""form-control"" id=""dtpExpireDateBatch"">
                            </div>
                        </div>
                        <div class=""col-12 col-sm-12 col-md-12 col-lg-6"">
                            Admission Date :
         ");
            WriteLiteral(@"                   <div class=""input-group"">
                                <input type=""date"" class=""form-control"" id=""dtpAdmissionDateBatch"">
                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-6""></div>
                        <div class=""col-6"">
                            <button class=""btn btn-success float-right mt-4 mb-4"" id=""BtnSaveBatch"">Save</button>
                        </div>
                    </div>
                </div>
                <div id=""DisPlayCustomizeTable"" style=""display: none;"">
                    <div class=""table-responsive"">
                        <div class=""row"">
                            <div class=""col-12"">
                                <table id=""tmpBatchFromTo"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;"">
                              ");
            WriteLiteral(@"      <thead>
                                        <tr>
                                            <th>Batch From</th>
                                            <th>Batch To</th>
                                            <th>Expiration Date</th>
                                            <th>Mfr Date</th>
                                            <th>Admission Date</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-12"">
                            <table id=""TbBatch"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;");
            WriteLiteral(@""">
                                <thead>
                                    <tr>
                                        <th>ItemCode</th>
                                        <th>Qty</th>
                                        <th>Batch Number</th>
                                        <th>Mfr Date</th>
                                        <th>Expiration Date</th>
                                        <th>Admission Date</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-danger"" data-dismiss=""modal"" id=""btnCLoseBatch"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade "" id=""ModalBarCode"" data-backdrop=""static"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background: #f0eff1; color: #696969;"">
            <div class=""modal-header"">
                <b>Batch Numbers - Setup</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-12"">
                            <table id=""TbBarCode"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background: #f0eff1; color: #696969;"">
                                <thead>
                                    <tr>
                                        <th>BarCode</th>
                                        <th>BarCodeName</th>
                                        <th>ItemCode</th>
                                        <th>ItemName</th>
                                        <th>U");
            WriteLiteral(@"OMCode</th>
                                        <th>Price</th>
                                        <th>Uom Name</th>
                                        <th>Manage Item</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" style=""background: #f0eff1; color: #696969;"" id=""btnCLoseBatch"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be671455", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be672495", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be673536", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be674577", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be675618", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be676659", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be677700", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be678741", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be679782", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb1298b50141139e60850272e42019f3cbc94be680823", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"



<script type=""text/javascript"">

    //ShowHide Add Item Bar
    function shAddItemBar() {
        var x = document.getElementById(""DivBarAddItem"");
        if (x.style.display === ""none"") {
            x.style.display = ""block"";
        } else {
            x.style.display = ""none"";
        }
    }


    /* Init DataTable */


    /* DataTable List Of Item */
    let objectLine = {};
    let LinesAR = [];
    DataTableInit.TableItemLine();
    var tbItemLine = $('#TbAR').DataTable();
    DataMethod.AddClassSelected(""TbAR"", tbItemLine);
    /* End DataTable List Of ItemLine */


    /* DataTable List Of Item Code */
    var LItm = [];
    DataTableInit.TableSearchItemCode();
    var tbItemSearch = $('#TbItem').DataTable();
    DataMethod.AddClassSelected(""TbItem"", tbItemSearch);
    $("".btnModelsItem"").click(function() {
        $(""#ModalItem"").modal({ backdrop: ""static"" });
        if (tbItemSearch.length==0) {
            EventItemAdd.getItemCode('");
#nullable restore
#line 996 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                                 Write(Url.Action("GetItemActionResult","GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"');
        }
    });
    /* End DataTable List Of Item Code */

    /* DataTable List Good Receipt PO*/
    var temporyListGoodReturn = [];
    var LCopyToGoodReturn = [];
    DataTableInit.TableGoodReturn();
    var TbCopyFromGoodReciptPO = $(""#TbCopyToGoodReturn"").DataTable();
    $('#TbCopyToGoodReturn tbody').on('click',
        'tr',
        function() {
            temporyListPO = [];
            if ($(this).hasClass('selected')) {
                temporyListPO = DataMethod.arrayRemove(temporyListPO, $(this)[0]._DT_RowIndex);
            } else {
                temporyListPO.push($(this)[0]._DT_RowIndex);
            }
        });
    DataMethod.AddClassSelected('TbCopyToGoodReturn', TbCopyFromGoodReciptPO);
    /*End Good Receipt PO*/

    /* DataTable List Purchase Order*/
    var temporyListPO = [];
    var LCopyFromPO = [];
    DataTableInit.TablePurchaseOrder();
    var TbCopyFromPO = $(""#TbCopyFromPO"").DataTable();
    $('#TbCopyFromPO tbody').on('click',
        'tr");
            WriteLiteral(@"',
        function() {
            temporyListPO = [];
            if ($(this).hasClass('selected')) {
                temporyListPO = DataMethod.arrayRemove(temporyListPO, $(this)[0]._DT_RowIndex);
            } else {
                temporyListPO.push($(this)[0]._DT_RowIndex);
            }
        });
    DataMethod.AddClassSelected('TbCopyFromPO', TbCopyFromPO);
    /*End Purchase Order*/
    /* DataTable List BarCode */

    var LBarCode = [];
    DataTableInit.TableBarCode();
    var TbBarCode = $(""#TbBarCode"").DataTable();
    DataMethod.AddClassSelected('TbBarCode', TbBarCode);
    /* End DataTable List BarCode */

    /* DataTable List Of Customer */
    var LCus = [];
    DataTableInit.TableCustomer();
    var tbCus = $('#TbCusCode').DataTable();
    DataMethod.AddClassSelected('TbCusCode', tbCus);
    $("".btnModelsCus"").click(function() {
        $(""#ModalCusCode"").modal({ backdrop: ""static"" });
        GetMasterData.getCustomer('");
#nullable restore
#line 1051 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                              Write(Url.Action("GetCustomerClientResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"','S');
    });
    $('#ChooseCus').click(function() {
        const index = tbCus.row('.selected').index();
        const data = tbCus.row(index).data();
        $('#CusID').val(data.cardCode);
        $('#CusName').val(data.cardName);
        $('#CcusID').css('background-color', '#4CAF50');
        $('#CopyFromPO').removeAttr(""disabled"");
        $('#CopyToGoodReturn').removeAttr(""disabled"");
        GetMasterData.getCurrency('");
#nullable restore
#line 1061 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                              Write(Url.Action("GetCurrency", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', data.cardCode);
    });
    /* End DataTable List Of Customer */

    /* DataTable Init Serial */
    var lsSerial = [];
    //DataTableInit.TableSerial1();
    DataTableInit.TableSerialGen();
    var tbSerial1 = $('#TbSerial').DataTable();
    /* End DataTable Init Serial */

    // DataTable Init Batch
    var LBatch = [];
    DataTableInit.TableBatch();
    var tbBatch = $('#TbBatch').DataTable();
    /* End DataTable Init Batch */

    // DataTable Init tmpBatch
    var LtmpBatch = [];
    DataTableInit.TabletmpBatchFromTo();
    var TbtmpBatchFromTo = $('#tmpBatchFromTo').DataTable();
    /* End Init DataTable */

    // DataTable Init Serial
    var LtmpSerial = [];
    DataTableInit.TableSerialFromTo();
    var TbSerial = $('#tmpSerial').DataTable();
    /* End Init DataTable Serial */

    // #region Init Master
    GetMasterData.getSeries("""", '");
#nullable restore
#line 1091 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                            Write(ViewData["Date"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("\', \'");
#nullable restore
#line 1091 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                                                 Write(Url.Action("GetSeries", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\', \'20\');\r\n    GetMasterData.getSaleEmployee(\'");
#nullable restore
#line 1092 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                              Write(Url.Action("GetSaleEmployeeResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\');\r\n    GetMasterData.getTaxCode(\'");
#nullable restore
#line 1093 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                         Write(Url.Action("GetTaxCodeResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\');\r\n    GetMasterData.getWarehouse(\'");
#nullable restore
#line 1094 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                           Write(Url.Action("GetWarehouseResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\');\r\n    // #endregion\r\n\r\n    // #region EventChange DocDate\r\n    $(\"#DocDate\").change(function() {\r\n        GetMasterData.getSeries($(\"#DocDate\").val(), \'");
#nullable restore
#line 1099 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                                                 Write(ViewData["Date"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("\', \'");
#nullable restore
#line 1099 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                                                                      Write(Url.Action("GetSeries", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', '20');
    });
    // #endregion
    // #region EventChange Discount
    $(""#DisPer"").change(function() {
        var total = ($(""#BTax"").val() - $(""#DisA"").val()).toFixed(2);
        total = (total * ($(""#DisPer"").val()/100)).toFixed(2);
        $(""#DisAmt"").val(total);
        $(""#Total"").val((($(""#BTax"").val() - $(""#DisA"").val()).toFixed(2)-total).toFixed(2));

    });
    $(""#DisAmt"").change(function() {
        var total = ($(""#BTax"").val() - $(""#DisA"").val()).toFixed(2);
        total = (($(""#DisAmt"").val() / total)*100).toFixed(2);
        $(""#DisPer"").val(total);
        $(""#Total"").val((($(""#BTax"").val() - $(""#DisA"").val()).toFixed(2)-$(""#DisAmt"").val()).toFixed(2));
    });
    // #endregion

    // #region Onchange BP Currency

    $(""#BPDocCurr"").change(function() {
        $(""#DocCurr"").val($(""#BPDocCurr"").val());
    });
    // #endregion

    $('#AddItem').click(function() {
        if ($(""#ItemCode"").val() === """") {
            alert(""Please Chose Item First"");
");
            WriteLiteral(@"        } else {
            if ($('#itemManage').val() == 'S') {
                if (objectLine.Serial !== undefined) {
                    if ($(""#Qty"").val() == objectLine.Serial.length) {
                        alert(""Can add to LineAR"");
                        objectLine.UomName = $(""#UomID"").val();
                        objectLine.Whs = $(""#whscode"").val();
                        objectLine.TaxCode = $(""#TaxCode"").val();
                        objectLine.LineTotal = $(""#totalItem"").val();
                        objectLine.PriceBeforeDis = $(""#Price"").val() * $(""#Qty"").val();
                        objectLine.Quantity = $(""#Qty"").val();
                        objectLine.DiscountAmount = $(""#DiscountAmt"").val();
                        objectLine.Discount = $(""#Discount"").val();
                        objectLine.UnitPrice = $(""#Price"").val();
                        LinesAR.push(objectLine);
                        tbItemLine.clear();
                        tbItemLine.rows.add(L");
            WriteLiteral(@"inesAR);
                        tbItemLine.search('').draw();
                        var priceBeforeDis = $(""#BTax"").val();
                        if (priceBeforeDis != """") {
                            priceBeforeDis = parseFloat(priceBeforeDis);
                        }
                        priceBeforeDis = priceBeforeDis + parseFloat($(""#Price"").val() * $(""#Qty"").val());
                        $(""#BTax"").val(priceBeforeDis);
                        var disByItem = $(""#DisA"").val();
                        if (disByItem != """") {
                            disByItem = parseFloat(disByItem);
                        }
                        disByItem = disByItem + parseFloat($(""#DiscountAmt"").val());
                        $(""#DisA"").val(disByItem);
                        var totalLine = $(""#Total"").val();
                        if (totalLine != """") {
                            totalLine = parseFloat(totalLine);
                        }
                        totalLine = total");
            WriteLiteral(@"Line + parseFloat($(""#totalItem"").val());
                        $(""#Total"").val(totalLine);
                        EventItemAdd.clearText(
                            [
                                { id: ""ItemCode"", value: """" },
                                { id: ""ItemDescr"", value: """" },
                                { id: ""Qty"", value: ""1"" },
                                { id: ""Price"", value: ""0"" },
                                { id: ""Discount"", value: ""0"" },
                                { id: ""DiscountAmt"", value: ""0"" },
                                { id: ""totalItem"", value: ""0"" },
                                { id: ""txtRowID"", value: ""0"" },
                                { id: ""txtScriptID"", value: ""0"" },
                                { id: ""ItemCodeSerial"", value: ""0"" },
                                { id: ""ItemCodeSerialQty"", value: ""0"" },
                                { id: ""SerialNumber"", value: ""0"" },
                                { id: ""txtManfrSeri");
            WriteLiteral(@"al"", value: ""0"" },
                                { id: ""BarCode"", value: """" }
                            ],
                            """");
                        EventItemAdd.clearText([
                                { id: ""UomID"" }
                            ],
                            ""option"");
                        objectLine = {};
                        //lsSerial = [];
                    } else {
                        $(""#ItemCodeSerial"").val($(""#ItemCode"").val());
                        $(""#ItemCodeSerialQty"").val($(""#Qty"").val() - objectLine.Serial.length);
                        //$('#SerialNumber').val(""123"");
                        lsSerial = objectLine.Serial;
                        tbSerial1.clear();
                        tbSerial1.rows.add(lsSerial);
                        tbSerial1.search("""").draw();
                        //$(""#"").val(objectLine.ManageItem);
                        $('#ModalBarCodeSerail').modal('show');
                    }
    ");
            WriteLiteral(@"            } else {
                    $(""#ItemCodeSerial"").val($(""#ItemCode"").val());
                    $(""#ItemCodeSerialQty"").val($(""#Qty"").val() - objectLine.Serial.length);
                    //$('#SerialNumber').val(""456"");
                    //$(""#"").val(objectLine.ManageItem);
                    lsSerial = objectLine.Serial;
                    tbSerial1.clear();
                    tbSerial1.rows.add(lsSerial);
                    tbSerial1.search("""").draw();
                    
                    $('#ModalBarCodeSerail').modal('show');
                }
            } else if ($('#itemManage').val() == 'B') {
                if (LBatch !== undefined) {
                    var qtyBatch = 0;
                    for (var i = 0; i < LBatch.length; i++) {
                        console.log(LBatch[i]);
                        qtyBatch = qtyBatch + LBatch[i].qty;
                    }
                    if (parseFloat($(""#Qty"").val()) === qtyBatch) {
                        ob");
            WriteLiteral(@"jectLine.UomName = $(""#UomID"").val();
                        objectLine.Whs = $(""#whscode"").val();
                        objectLine.TaxCode = $(""#TaxCode"").val();
                        objectLine.LineTotal = $(""#totalItem"").val();
                        objectLine.PriceBeforeDis = $(""#Price"").val() * $(""#Qty"").val();
                        objectLine.Quantity = $(""#Qty"").val();
                        objectLine.DiscountAmount = $(""#DiscountAmt"").val();
                        objectLine.Discount = $(""#Discount"").val();
                        objectLine.UnitPrice = $(""#Price"").val();
                        objectLine.Batches = LBatch;
                        LinesAR.push(objectLine);
                        tbItemLine.clear();
                        tbItemLine.rows.add(LinesAR);
                        tbItemLine.search('').draw();
                        var priceBeforeDis = $(""#BTax"").val();
                        if (priceBeforeDis != """") {
                            priceBefore");
            WriteLiteral(@"Dis = parseFloat(priceBeforeDis);
                        }
                        priceBeforeDis = priceBeforeDis + parseFloat($(""#Price"").val() * $(""#Qty"").val());
                        $(""#BTax"").val(priceBeforeDis);
                        var disByItem = $(""#DisA"").val();
                        if (disByItem != """") {
                            disByItem = parseFloat(disByItem);
                        }
                        disByItem = disByItem + parseFloat($(""#DiscountAmt"").val());
                        $(""#DisA"").val(disByItem);
                        var totalLine = $(""#Total"").val();
                        if (totalLine != """") {
                            totalLine = parseFloat(totalLine);
                        }
                        totalLine = totalLine + parseFloat($(""#totalItem"").val());
                        $(""#Total"").val(totalLine);
                        EventItemAdd.clearText(
                            [
                                { id: ""ItemCo");
            WriteLiteral(@"de"", value: """" },
                                { id: ""ItemDescr"", value: """" },
                                { id: ""Qty"", value: ""1"" },
                                { id: ""Price"", value: ""0"" },
                                { id: ""Discount"", value: ""0"" },
                                { id: ""DiscountAmt"", value: ""0"" },
                                { id: ""totalItem"", value: ""0"" },
                                { id: ""txtRowID"", value: ""0"" },
                                { id: ""txtScriptID"", value: ""0"" },
                                { id: ""ItemCodeSerial"", value: ""0"" },
                                { id: ""ItemCodeSerialQty"", value: ""0"" },
                                { id: ""SerialNumber"", value: ""0"" },
                                { id: ""txtManfrSerial"", value: ""0"" }
                            ],
                            """");
                        EventItemAdd.clearText([
                                { id: ""UomID"" }
                            ],
     ");
            WriteLiteral(@"                       ""option"");
                        objectLine = {};
                        LBatch = [];
                    } else {
                        $(""#ItemCodeBatch"").val($(""#ItemCode"").val());
                        var tmpQty = parseFloat($(""#Qty"").val()) - qtyBatch;
                        console.log(tmpQty);
                        $(""#ItemCodeBatchQty"").val(tmpQty);
                        //$(""#SerialNumber"").val(""1231232"");
                        $('#ModalBarCodeBatch').modal('show');
                    }
                } else {
                    $(""#ItemCodeBatch"").val($(""#ItemCode"").val());
                    $(""#ItemCodeBatchQty"").val($(""#Qty"").val());
                    //$(""#SerialNumber"").val(""1231232"");
                    $('#ModalBarCodeBatch').modal('show');
                    //focus

                }
            } else {
                objectLine.UomName = $(""#UomID"").val();
                objectLine.Whs = $(""#whscode"").val();
           ");
            WriteLiteral(@"     objectLine.TaxCode = $(""#TaxCode"").val();
                objectLine.LineTotal = $(""#totalItem"").val();
                objectLine.PriceBeforeDis = $(""#Price"").val() * $(""#Qty"").val();
                objectLine.Quantity = $(""#Qty"").val();
                objectLine.DiscountAmount = $(""#DiscountAmt"").val();
                objectLine.Discount = $(""#Discount"").val();
                objectLine.UnitPrice = $(""#Price"").val();
                LinesAR.push(objectLine);
                tbItemLine.clear();
                tbItemLine.rows.add(LinesAR);
                tbItemLine.search('').draw();
                var priceBeforeDis = $(""#BTax"").val();
                if (priceBeforeDis != """") {
                    priceBeforeDis = parseFloat(priceBeforeDis);
                }
                priceBeforeDis = priceBeforeDis + parseFloat($(""#Price"").val() * $(""#Qty"").val());
                $(""#BTax"").val(priceBeforeDis);
                var disByItem = $(""#DisA"").val();
                if (disBy");
            WriteLiteral(@"Item != """") {
                    disByItem = parseFloat(disByItem);
                }
                disByItem = disByItem + parseFloat($(""#DiscountAmt"").val());
                $(""#DisA"").val(disByItem);
                var totalLine = $(""#Total"").val();
                if (totalLine != """") {
                    totalLine = parseFloat(totalLine);
                }
                totalLine = totalLine + parseFloat($(""#totalItem"").val());
                $(""#Total"").val(totalLine);
                EventItemAdd.clearText(
                    [
                        { id: ""ItemCode"", value: """" },
                        { id: ""ItemDescr"", value: """" },
                        { id: ""Qty"", value: ""1"" },
                        { id: ""Price"", value: ""0"" },
                        { id: ""Discount"", value: ""0"" },
                        { id: ""DiscountAmt"", value: ""0"" },
                        { id: ""totalItem"", value: ""0"" },
                        { id: ""txtRowID"", value: ""0"" },
         ");
            WriteLiteral(@"               { id: ""txtScriptID"", value: ""0"" },
                        { id: ""ItemCodeSerial"", value: ""0"" },
                        { id: ""ItemCodeSerialQty"", value: ""0"" },
                        { id: ""SerialNumber"", value: ""0"" },
                        { id: ""txtManfrSerial"", value: ""0"" }
                    ],
                    """");
                EventItemAdd.clearText([
                        { id: ""UomID"" }
                    ],
                    ""option"");
                objectLine = {};
                LBatch = [];
            }
        }
    });

    $('#Save').click(function () {
        document.getElementById(""frmLoading"").style.display = ""block"";
        EventSaveGoodReceiptPO.sendGoodReceiptPO('");
#nullable restore
#line 1351 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                                             Write(Url.Action("CreateGoodsReceiptPoResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"');
    });


    // Item Code
    $('#ChooseItem').click(function() {
        const index = tbItemSearch.row('.selected').index();
        const data = tbItemSearch.row(index).data();
        $('#ItemCode').val(data.itemCode);
        $('#ItemDescr').val(data.itemName);
        $('#Price').val(data.unitPrice);
        $('#itemManage').val(data.manageItem);
        $('#totalItem').val(data.unitPrice);
        $('#CItemCode').css('background-color', '#4CAF50');

    });
    // End Item Code

    // Copy From PO
    $('#ChoosePO').click(function() {
        const result = EventCopyFromPOService.ChoosePO_Click(temporyListPO, TbCopyFromPO);
        LinesAR = result.linesAR;
        $('#Remark').val(`Based On Purchase Orders ${result.remark}`);
        $('#Total').val(result.docTotal);
        $(""#DisPer"").val(result.discountPercentage);
        $(""#DisAmt"").val(result.discountAmount);
        $(""#DisA"").val(result.discountLine);
        $(""#BTax"").val(Number(result.lineTotal + result.di");
            WriteLiteral(@"scountLine).toFixed(2));
        tbItemLine.clear();
        tbItemLine.rows.add(LinesAR);
        tbItemLine.search('').draw();
    });
    $('#CopyFromPO').click(function() {
        temporyListPO = [];
        if ($(""#CusID"").val() != """") {
            const cardCode = $(""#CusID"").val();
            GetMasterData.getPurchaseOrder('");
#nullable restore
#line 1387 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                                       Write(Url.Action("GetPurchaseOrderByCardCode", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', cardCode);
        } else {
            alert(""Please Select Customer, if you don't select can bind data"");
        }
    });
    // End Copy From PO

    //Save Serial

    $(""#BtnSaveSerial1"").click(function() {
        if ($(""#BtnSaveSerial1"").text() === ""Save"") {
            if ($(""#SerialNumber"").val() === """" || $(""#SerialNumber"").val() === null) {
                alert(""Please Enter Serial Number Save!"");
            } else {
                if ($(""#ItemCodeSerialQty"").val() <= 0) {
                    alert(""Cannot save Serial with Qty Zero!"");
                } else {
                    var serial = {};
                    let qty = $(""#ItemCodeSerialQty"").val() - 1;
                    serial.SerialNumber = $(""#SerialNumber"").val();
                    serial.MfrSerialNo = $(""#txtManfrSerial"").val();
                    serial.ExpDate = $(""#txtExpireDate"").val();
                    serial.Script = $(""#txtScriptID"").val();
                    let index = $(""#txtRowID"").val(");
            WriteLiteral(@");
                    console.log(index);
                    lsSerial.push(serial);
                    if (index === """") { //|| index===""0""
                        objectLine.Serial = lsSerial;
                    } else {
                        LinesAR[index].Serial = lsSerial;
                    }
                    console.log(objectLine);
                    console.log(LinesAR[index]);
                    console.log(lsSerial);
                    $(""#SerialNumber"").val("""");
                    $(""#txtManfrSerial"").val("""");
                    $(""#txtExpireDate"").val("""");
                    $(""#ItemCodeSerialQty"").val(qty);
                    tbSerial1.clear();
                    tbSerial1.rows.add(lsSerial);
                    tbSerial1.search("""").draw();
                }
            }
        } else if ($(""#BtnSaveSerial1"").text() === ""Save Item"") {
            alert(""SaveItem"");
            var serialFrom = $(""#optSerialFrom"").val();
            var serialTo = $(""#opt");
            WriteLiteral(@"SerialTo"").val();
            var i = 0;
            if (serialFrom !== -1) {
                i = 1;
            }
            if (serialTo !== -1) {
                i = 1;
            }
            console.log(i);
            if (i === 1) {
                var k = 0;
                if (LtmpSerial.length !== null && LtmpSerial.length !== 0) {
                    if ($(""#optBatchFrom"").val() > $(""#optBatchTo"").val()) {
                        alert(""Cannot Add BatchTo Smaller than BatchFrom"");
                    } else {
                        for (var z = 0; z < LtmpSerial.length; z++) {
                            if (LtmpSerial[z].SerialFrom === $(""#optBatchFrom"").val()) {
                                k = 1;
                            }
                            if (LtmpSerial[z].SerialTo === $(""#optBatchTo"").val()) {
                                k = 1;
                            }
                            if (LtmpSerial[z].SerialTo === $(""#optBatchFrom"").val()) {
    ");
            WriteLiteral(@"                            k = 1;
                            }
                            if (LtmpSerial[z].SerialFrom === $(""#optBatchTo"").val()) {
                                k = 1;
                            }
                            if ($(""#optSerialFrom"").val() === -1) {
                                k = 1;
                            }
                            if ($(""#optSerialTo"").val() === -1) {
                                k = 1;
                            }
                            if ($(""#optSerialFrom"").val() <= LtmpSerial[z].SerialTo && $(""#optSerialFrom"").val() <= LtmpSerial[z].SerialTo) {
                                k = 1;
                            }
                            if ($(""#optSerialTo"").val() <= LtmpSerial[z].SerialTo && $(""#optSerialTo"").val() <= LtmpSerial[z].SerialTo) {
                                k = 1;
                            }
                        }
                        if (k === 1) {
                            a");
            WriteLiteral(@"lert(""Can not Add Serial The same"");
                        } else {
                            LtmpSerial.push({
                                ""SerialFrom"": $(""#optSerialFrom"").val(),
                                ""SerialTo"": $(""#optSerialTo"").val(),
                                ""MfrNo"": $(""#txtManfrSerial"").val(),
                                ""ExpireDate"": $(""#txtExpireDate"").val()
                            });
                        }
                    }
                } else {
                    if ($(""#txtTotalQtyGenSerial"").val() !== """") {
                        if ($(""#optBatchFrom"").val() > $(""#optBatchTo"").val()) {
                            alert(""Cannot Add BatchTo Smaller than BatchFrom"");
                        } else {
                            LtmpSerial.push({
                                ""SerialFrom"": $(""#optSerialFrom"").val(),
                                ""SerialTo"": $(""#optSerialTo"").val(),
                                ""MfrNo"": $(""#txtManfr");
            WriteLiteral(@"Serial"").val(),
                                ""ExpireDate"": $(""#txtExpireDate"").val()
                            });
                        }
                    }
                }
            }
            $(""#txtManfrSerial"").val("""");
            $(""#txtExpireDate"").val("""");
            TbSerial.clear();
            TbSerial.rows.add(LtmpSerial);
            TbSerial.search('').draw();
        }
    });
    $(""#btnSerialNumGennerate"").click(function() {
        if ($(""#optSerialType"").val() === ""1"") {
            //Standard
            console.log(""Standard -> Gennerate Code"");
            if ($(""#ItemCodeSerialQty"").val() <= 0) {
                alert(""Cannot save Serial with Qty Zero!"");
            } else {
                EventItemAdd.GenerateSerialOrBatch('");
#nullable restore
#line 1514 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                                               Write(Url.Action("GetSerialBatchResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', $(""#ItemCodeSerial"").val(), 1, 'S');
                //$(""#SerialNumber"").val(a);
            }
        } else if ($(""#optSerialType"").val() === ""2"") {
            //Advance
            //alert(""Advance"");
            console.log(""Advance -> Gennerate Code"");
            if (LtmpSerial.length !== 0) {
                var a = {};
                var obj = [];
                console.log(LtmpSerial);
                for (let i = 0; i < LtmpSerial.length; i++) {
                    obj.push({
                        ""SerialFrom"": LtmpSerial[i].SerialFrom,
                        ""SerialTo"": LtmpSerial[i].SerialTo,
                        ""MfrNo"": LtmpSerial[i].MfrNo,
                        ""ExpireDate"": LtmpSerial[i].ExpireDate,
                        ""itemCode"": $(""#ItemCodeBatch"").val(),
                        ""qty"": 1,
                        ""TypeSerialGen"": $(""#optSerialType"").val()
                    });
                }
                a.ListSerials = obj;
                $.");
            WriteLiteral("ajax({\r\n                    url: \'");
#nullable restore
#line 1538 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                     Write(Url.Action("GetSerialBatchResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                    type: ""POST"",
                    dataType: ""JSON"",
                    data: { generateSerialBatchRequest: a },
                    success: function(data) {
                        //alert(""Success"");
                        console.log(data);
                        var tmpQty = parseFloat($(""#ItemCodeSerialQty"").val());
                        for (let i = 0; i < data.length; i++) {
                            tmpQty = tmpQty - 1;
                            lsSerial.push(
                                {
                                    ""SerialNumber"": data[i].serialAndBatch,
                                    ""MfrSerialNo"": data[i].mfrDate,
                                    ""ExpDate"": data[i].expirationDate
                                });
                        }
                        //Clear Data
                        LtmpSerial = [];
                        TbSerial.clear();
                        TbSerial.rows.add(LtmpSerial);
             ");
            WriteLiteral(@"           TbSerial.search('').draw();;
                        $(""#txtTotalGenSerial"").val("""");
                        $(""#txtPerSerial"").val("""");
                        $(""#txtTotalQtyGenSerial"").val("""");
                        $(""#optSerialFrom"").empty();
                        $(""#optSerialTo"").empty();
                        $(""#txtExpireDate"").val("""");
                        $(""#txtManfrSerial"").val("""");
                        //End Clear Data
                        console.log(tmpQty);
                        $(""#ItemCodeSerialQty"").val(tmpQty);
                        console.log(lsSerial);
                        tbSerial1.clear();
                        tbSerial1.rows.add(lsSerial);
                        tbSerial1.search('').draw();
                    },
                    error: function(erro) {
                        console.log(erro.responseText);
                    }
                });
            } else {
                alert(""Please Save Item Before Genera");
            WriteLiteral(@"te TmpDate"");
            }

        }

    });
    //To Do List
    $(""#btnBatchNumGennerate"").click(function() {
        if ($(""#optBatchType"").val() === ""1"") {
            //Standard
            alert(""Standard"");
            var a = {};
            var obj = [];
            obj.push({
                ""ManufactureDate "":$(""#dtpMfrDateBatch"").val(),
                ""ExpireDate"":$(""#dtpExpireDateBatch"").val(),
                ""AdmissionDate"":$(""#dtpAdmissionDateBatch"").val(),
                ""ItemCode"":$(""#ItemCodeBatch"").val(),
                ""Qty"":$(""#ItemCodeBatchQty"").val()
            });
            a.ListBatches=obj;
            console.log(a);
            $.ajax({
                url: '");
#nullable restore
#line 1603 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                 Write(Url.Action("GenerateBatchResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                type: ""POST"",
                data: { generateSerialBatchRequest: a },
                dataType: ""JSON"",
                success: function(data) {
                    for (var i = 0; i < data.length; i++) {
                        $(""#txtRowIDBatch"").val(data[i].serialAndBatch);
                        $(""#txtScriptIDBatch"").val(data[i].script);
                        $(""#BatchNumber"").val(data[i].serialAndBatch);
                    }
                },
                error: function(erro) {
                    console.log(erro.responseText);
                }
            });
        } else if ($(""#optBatchType"").val() === ""2"") {
            //Advance
            alert(""Advance"");
            if (LtmpBatch.length !== 0) {
                var a = {};
                var obj = [];
                console.log(LtmpBatch);
                for (let i = 0; i < LtmpBatch.length; i++) {
                    obj.push({
                        ""ManufactureDate"": LtmpBatch[i].");
            WriteLiteral(@"MfrDate,
                        ""ExpireDate"": LtmpBatch[i].ExpirationDate,
                        ""AdmissionDate"": LtmpBatch[i].AdmissionDate,
                        ""BatchFrom"": LtmpBatch[i].BatchFrom,
                        ""BatchTo"": LtmpBatch[i].BatchTo,
                        ""ItemCode"": $(""#ItemCodeBatch"").val(),
                        ""Qty"": LtmpBatch[i].Qty,
                        ""BatchCount"": $(""#txtTotalGenBatch"").val(),
                        ""TypeBatchGen"": $(""#optBatchType"").val()
                    });
                }
                a.ListBatches = obj;
                console.log(a);
                $.ajax({
                    url: '");
#nullable restore
#line 1641 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                     Write(Url.Action("GenerateBatchResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                    type: ""POST"",
                    data: { generateSerialBatchRequest: a },
                    dataType: ""JSON"",
                    success: function(data) {
                        //alert(""Success"");
                        console.log(data);
                        var tmpQty = parseFloat($(""#ItemCodeBatchQty"").val());
                        for (let i = 0; i < data.length; i++) {
                            tmpQty = tmpQty - data[i].qty;
                            LBatch.push(
                                {
                                    ""itemCode"": data[i].itemCode,
                                    ""qty"": data[i].qty,
                                    ""serialAndBatch"": data[i].serialAndBatch,
                                    ""mfrDate"": data[i].mfrDate,
                                    ""expirationDate"": data[i].expirationDate,
                                    ""admissionDate"": data[i].admissionDate
                                });
      ");
            WriteLiteral(@"                  }
                        //Clear Data
                        LtmpBatch = [];
                        TbtmpBatchFromTo.clear();
                        TbtmpBatchFromTo.rows.add(LtmpBatch);
                        TbtmpBatchFromTo.search('').draw();;
                        $(""#txtTotalGenBatch"").val("""");
                        $(""#txtPerBatch"").val("""");
                        $(""#txtTotalQtyGenBatch"").val("""");
                        $(""#optBatchFrom"").empty();
                        $(""#optBatchTo"").empty();
                        $(""#dtpMfrDateBatch"").val("""");
                        $(""#dtpExpireDateBatch"").val("""");
                        $(""#dtpAdmissionDateBatch"").val("""");
                        //End Clear Data
                        console.log(tmpQty);
                        $(""#ItemCodeBatchQty"").val(tmpQty);
                        console.log(LBatch);
                        tbBatch.clear();
                        tbBatch.rows.add(LBatch);
          ");
            WriteLiteral(@"              tbBatch.search('').draw();
                    },
                    error: function(erro) {
                        console.log(erro.responseText);
                    }
                });
            } else {
                alert(""Please Save Item Before Generate TmpDate"");
            }
        }
    });

    //End Save Serial

    $("".modal-header"").on(""mousedown"",
        function(mousedownEvt) {
            var $draggable = $(this);
            var x = mousedownEvt.pageX - $draggable.offset().left,
                y = mousedownEvt.pageY - $draggable.offset().top;
            $(""body"").on(""mousemove.draggable"",
                function(mousemoveEvt) {
                    $draggable.closest("".modal-dialog"").offset({
                        ""left"": mousemoveEvt.pageX - x,
                        ""top"": mousemoveEvt.pageY - y
                    });
                });
            $(""body"").one(""mouseup"",
                function() {
                    $(""body"")");
            WriteLiteral(@".off(""mousemove.draggable"");
                });
            $draggable.closest("".modal"").one(""bs.modal.hide"",
                function() {
                    $(""body"").off(""mousemove.draggable"");
                });
        }
    );
    $('#DocDate').val(formatDate('");
#nullable restore
#line 1716 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                             Write(ViewData["Date"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("\'));\r\n    $(\'#DocumentDate\').val(formatDate(\'");
#nullable restore
#line 1717 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                                  Write(ViewData["Date"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'));
    function DeleteBatch(arr, value) {
        let tmp = arr.filter(function (ele) {
            return ele.serialAndBatch !== value;
        });
        let tmpQty = arr.filter(function (ele) {
            return ele.serialAndBatch === value;
        });
        console.log(tmpQty);
        var tmpQ = parseFloat($(""#ItemCodeBatchQty"").val());
        tmpQ = tmpQ + tmpQty[0].qty;
        console.log(tmpQ);
        $(""#ItemCodeBatchQty"").val(tmpQ);
        LBatch = tmp;
        tbBatch.clear();
        tbBatch.rows.add(LBatch);
        tbBatch.search('').draw();
    }
    function formatDate(date) {
        const d = new Date(date);
        var month = `${d.getMonth() + 1}`,
            day = `${d.getDate()}`;
        const year = d.getFullYear();
        if (month.length < 2)
            month = `0${month}`;
        if (day.length < 2)
            day = `0${day}`;

        return [year, month, day].join('-');
    }

    function DisCountPerChange() {
        EventSaveGoodR");
            WriteLiteral(@"eceiptPO.LineDiscountPer();
    }
    function DisAmtChange() {
        EventSaveGoodReceiptPO.LinDiscountAMT();
    }

    function BatchChangeType() {
        if ($(""#optBatchType"").val() === ""1"") {
            $(""#DisPlayCustomizeTable"").css(""display"",""none"");
            $(""#DisPlayCustomize"").css(""display"",""none"");
            $(""#BtnSaveBatch"").val(""Save"");
            $(""#BatchNumber"").removeAttr(""readonly"");
            $(""#BtnSaveBatch"").text(""Save"");
        } else {
            $(""#DisPlayCustomizeTable"").css(""display"",""block"");
            $(""#DisPlayCustomize"").css(""display"",""block"");
            $(""#BatchNumber"").attr(""readonly"",""readonly"");
            $(""#BtnSaveBatch"").text(""Save Item"");
        }
    }

    function SerialChangeType() {
        if ($(""#optSerialType"").val() === ""1"") {
            $(""#DisPlayCustomizeTableSerial"").css(""display"",""none"");
            $(""#DisPlayCustomizeSerial"").css(""display"",""none"");
            $(""#BtnSaveBatch"").val(""Save"");
       ");
            WriteLiteral(@"     $(""#SerialNumber"").removeAttr(""readonly"");
            $(""#BtnSaveSerial1"").text(""Save"");
            alert(""Standard"");
        } else {
            $(""#DisPlayCustomizeTableSerial"").css(""display"",""block"");
            $(""#DisPlayCustomizeSerial"").css(""display"",""block"");
            $(""#SerialNumber"").attr(""readonly"",""readonly"");
            $(""#BtnSaveSerial1"").text(""Save Item"");
            alert(""Adance"");
        }
    }

    $(""#txtTotalGenBatch"").change(function() {
        if ($(""#txtPerBatch"").val() !== 0 && $(""#txtPerBatch"").val() !=="""") {
            var totalGenBatch = $(""#txtTotalGenBatch"").val();
            var totalPerBatch = $(""#txtPerBatch"").val();
            var totalQty = totalGenBatch * totalPerBatch;
            if (totalQty > $(""#ItemCodeBatchQty"").val()) {
                alert(""Value Can not bigger than Qty"");
            } else {
                $(""#txtTotalQtyGenBatch"").val(totalQty);
                $(""#optBatchFrom"").empty();
                $(""#optBatc");
            WriteLiteral(@"hTo"").empty();
                //$(""#optBatchTo"").append(new Option(""All"", ""-1"")).selected = true;
                //$(""#optBatchFrom"").append(new Option(""All"", ""-1"")).selected=true;
                $(""#optBatchTo"").append('<option value=""-1"" selected=""selected"">ALL</option>');
                $(""#optBatchFrom"").append('<option value=""-1"" selected=""selected"">ALL</option>');
                for (i = 1; i <= totalGenBatch; i++) {
                    $(""#optBatchFrom"").append(new Option(i, i));
                    $(""#optBatchTo"").append(new Option(i, i));
                }
            }
        }
    });

    $(""#txtPerBatch"").change(function() {
        if ($(""#txtPerBatch"").val() !== 0 && $(""#txtPerBatch"").val() !== """") {
            const totalGenBatch = $(""#txtTotalGenBatch"").val();
            const totalPerBatch = $(""#txtPerBatch"").val();
            const totalQty = totalGenBatch * totalPerBatch;
            if (totalQty > $(""#ItemCodeBatchQty"").val()) {
                alert(""Value Ca");
            WriteLiteral(@"n not bigger than Qty"");
            } else {
                $(""#txtTotalQtyGenBatch"").val(totalQty);
                $(""#optBatchFrom"").empty();
                $(""#optBatchTo"").empty();
                //$(""#optBatchTo"").append(new Option(""All"", ""-1""));
                //$(""#optBatchFrom"").append(new Option(""All"", ""-1""));
                $(""#optBatchTo"").append('<option value=""-1"" selected=""selected"">ALL</option>');
                $(""#optBatchFrom"").append('<option value=""-1"" selected=""selected"">ALL</option>');
                for (i = 1; i <= totalGenBatch; i++) {
                    $(""#optBatchFrom"").append(new Option(i, i));
                    $(""#optBatchTo"").append(new Option(i, i));
                }
            }
        }
    });

    $(""#txtTotalGenSerial"").change(function() {
        if ($(""#txtPerSerial"").val() !== 0 && $(""#txtPerSerial"").val() !=="""") {
            var totalGenBatch = $(""#txtTotalGenSerial"").val();
            var totalPerBatch = $(""#txtPerSerial"").val();");
            WriteLiteral(@"
            var totalQty = totalGenBatch * totalPerBatch;
            if (totalQty > $(""#ItemCodeSerialQty"").val()) {
                alert(""Value Can not bigger than Qty"");
            } else {
                $(""#txtTotalQtyGenSerial"").val(totalQty);
                $(""#optSerialFrom"").empty();
                $(""#optSerialTo"").empty();
                //$(""#optBatchTo"").append(new Option(""All"", ""-1"")).selected = true;
                //$(""#optBatchFrom"").append(new Option(""All"", ""-1"")).selected=true;
                $(""#optSerialTo"").append('<option value=""-1"" selected=""selected"">ALL</option>');
                $(""#optSerialFrom"").append('<option value=""-1"" selected=""selected"">ALL</option>');
                for (i = 1; i <= totalGenBatch; i++) {
                    $(""#optSerialFrom"").append(new Option(i, i));
                    $(""#optSerialTo"").append(new Option(i, i));
                }
            }
        }
    });

    $(""#BtnSaveBatch"").click(function() {
        if ($(""#BtnS");
            WriteLiteral(@"aveBatch"").text()===""Save"") {
            //alert(""Save Btn"");
            LBatch.push(
                {
                    ""itemCode"":$(""#ItemCodeBatch"").val(),
                    ""qty"":1,
                    ""serialAndBatch"":$(""#BatchNumber"").val(),
                    ""mfrDate"":$(""#dtpMfrDateBatch"").val(),
                    ""expirationDate"":$(""#dtpExpireDateBatch"").val(),
                    ""admissionDate"":$(""#dtpAdmissionDateBatch"").val()
                });
            var qtytmp = parseFloat($(""#ItemCodeBatchQty"").val()) - 1;
            $(""#ItemCodeBatchQty"").val(qtytmp);
            //Clear Text
            $(""#txtTotalGenBatch"").val("""");
            $(""#txtPerBatch"").val("""");
            $(""#txtTotalQtyGenBatch"").val("""");
            $(""#optBatchFrom"").empty();
            $(""#optBatchTo"").empty();
            $(""#dtpMfrDateBatch"").val("""");
            $(""#dtpExpireDateBatch"").val("""");
            $(""#dtpAdmissionDateBatch"").val("""");
            $(""#BatchNumber"").val("""");");
            WriteLiteral(@"
            tbBatch.clear();
            tbBatch.rows.add(LBatch);
            tbBatch.search('').draw();
        }else if ($(""#BtnSaveBatch"").text()===""Save Item"") {
            var batchFrom=$(""#optBatchFrom"").val();
            console.log($(""#optBatchFrom"").val());
            var batchTo=$(""#optBatchTo"").val();
            var i = 0;
            if (batchFrom !== -1) {
                i = 1;
            }
            if (batchTo !== -1) {
                i = 1;
            }
            console.log(i);
            if (i === 1) {
                var k = 0;
                if (LtmpBatch.length !== null && LtmpBatch.length !== 0) {
                    if ($(""#optBatchFrom"").val() > $(""#optBatchTo"").val()) {
                        alert(""Cannot Add BatchTo Smaller than BatchFrom"");
                    }
                    else{
                        for (var z = 0; z < LtmpBatch.length; z++) {
                            if (LtmpBatch[z].BatchFrom === $(""#optBatchFrom"").val()) {
");
            WriteLiteral(@"                                k = 1;
                            }
                            if (LtmpBatch[z].BatchTo === $(""#optBatchTo"").val()) {
                                k = 1;
                            }
                            if (LtmpBatch[z].BatchTo === $(""#optBatchFrom"").val()) {
                                k = 1;
                            }
                            if (LtmpBatch[z].BatchFrom === $(""#optBatchTo"").val()) {
                                k = 1;
                            }
                            if ($(""#optBatchFrom"").val() === -1) {
                                k = 1;
                            }
                            if ($(""#optBatchTo"").val() === -1) {
                                k = 1;
                            }
                            if ($(""#optBatchFrom"").val() <= LtmpBatch[z].BatchTo && $(""#optBatchFrom"").val() <= LtmpBatch[z].BatchTo) {
                                k = 1;
                            }
");
            WriteLiteral(@"                            if ($(""#optBatchTo"").val() <= LtmpBatch[z].BatchTo && $(""#optBatchTo"").val() <= LtmpBatch[z].BatchTo) {
                                k = 1;
                            }
                        }
                        if (k === 1) {
                            alert(""Can not Add Batch The same"");
                        } else {
                            LtmpBatch.push({
                                ""BatchFrom"": $(""#optBatchFrom"").val(),
                                ""BatchTo"": $(""#optBatchTo"").val(),
                                ""ExpirationDate"": $(""#dtpExpireDateBatch"").val(),
                                ""MfrDate"": $(""#dtpMfrDateBatch"").val(),
                                ""AdmissionDate"": $(""#dtpAdmissionDateBatch"").val(),
                                ""Qty"": $(""#txtPerBatch"").val()
                            });
                            //Clear Text
                            //$(""#txtTotalGenBatch"").val("""");
                        ");
            WriteLiteral(@"    //$(""#txtPerBatch"").val("""");
                            //$(""#txtTotalQtyGenBatch"").val("""");
                            //$(""#optBatchFrom"").empty();
                            //$(""#optBatchTo"").empty();
                            //$(""#dtpMfrDateBatch"").val("""");
                            //$(""#dtpExpireDateBatch"").val("""");
                            //$(""#dtpAdmissionDateBatch"").val("""");
                            //$(""#BatchNumber"").val("""");
                        }
                    }
                } else {
                    if ($(""#txtTotalQtyGenBatch"").val() !== """") {
                        if ($(""#optBatchFrom"").val() > $(""#optBatchTo"").val()) {
                            alert(""Cannot Add BatchTo Smaller than BatchFrom"");
                        } else {
                            LtmpBatch.push({
                                ""BatchFrom"": ($(""#optBatchFrom"").val()==-1)?""ALL"":$(""#optBatchFrom"").val(),
                                ""BatchTo"": ($(""#optBatchTo"")");
            WriteLiteral(@".val()==-1)?""ALL"":$(""#optBatchTo"").val(),
                                ""ExpirationDate"": $(""#dtpExpireDateBatch"").val(),
                                ""MfrDate"": $(""#dtpMfrDateBatch"").val(),
                                ""AdmissionDate"": $(""#dtpAdmissionDateBatch"").val(),
                                ""Qty"": $(""#txtPerBatch"").val()
                            });
                            //CLear Data
                            //$(""#txtTotalGenBatch"").val("""");
                            //$(""#txtPerBatch"").val("""");
                            //$(""#txtTotalQtyGenBatch"").val("""");
                            //$(""#optBatchFrom"").empty();
                            //$(""#optBatchTo"").empty();
                            //$(""#dtpMfrDateBatch"").val("""");
                            //$(""#dtpExpireDateBatch"").val("""");
                            //$(""#dtpAdmissionDateBatch"").val("""");
                            //$(""#BatchNumber"").val("""");
                        }
                  ");
            WriteLiteral(@"  }
                }
            }
            TbtmpBatchFromTo.clear();
            TbtmpBatchFromTo.rows.add(LtmpBatch);
            TbtmpBatchFromTo.search('').draw();
        }
    });
    function DeleteTmpBatch(LsBatch,BatchFrom,BatchTo){
        let tmp = LsBatch.filter(function (ele) {
            return (ele.BatchFrom !== BatchFrom && ele.BatchTo !== BatchTo);
        });
        console.log(tmp);
        LtmpBatch = tmp;
        TbtmpBatchFromTo.clear();
        TbtmpBatchFromTo.rows.add(LtmpBatch);
        TbtmpBatchFromTo.search('').draw();
    }
    function DeleteTmpSerial(LsSerial,SerialFrom,SerialTo){
        let tmp = LsSerial.filter(function (ele) {
            return (ele.SerialFrom !== SerialFrom && ele.SerialTo !== SerialTo);
        });
        console.log(tmp);
        LtmpSerial = tmp;
        TbSerial.clear();
        TbSerial.rows.add(LtmpSerial);
        TbSerial.search('').draw();
    }

    function QtyChange() {
        var PriceChange=parseFloat($(");
            WriteLiteral(@"""#Price"").val());
        PriceChange = PriceChange * $(""#Qty"").val();
        $(""#totalItem"").val(PriceChange);
    }
    $('#CopyToGoodReturn').click(function() {
        temporyListPO = [];
        if ($(""#CusID"").val() != """") {
            const cardCode = $(""#CusID"").val();
            GetMasterData.getGoodReceiptPO('");
#nullable restore
#line 2013 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                                       Write(Url.Action("GetGoodReturnByCardCode", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', cardCode);
        } else {
            alert(""Please Select Customer, if you don't select can bind data"");
        }
    });


    $(""#btnCLoseBatch"").click(function() {
        if ($(""#txtIDRowB"").val() !== """") {
            //alert(""Hello"");
            console.log(parseInt($(""#txtIDRowB"").val()));
            console.log(""BatchSerial Save And Close."");
            console.log(LinesAR[parseInt($(""#txtIDRowB"").val())].Batches);
            console.log(LBatch);
            LinesAR[parseInt($(""#txtIDRowB"").val())].Batches = LBatch;
            $(""#txtIDRowB"").val("""");
            LBatch = [];
            tbBatch.clear();
            tbBatch.rows.add(LBatch);
            tbBatch.search("""").draw();
        }
    });

    $(""#btnCLoseSerial"").click(function () {
        console.log(""Exit Form Serial."");
    });

    $(""#btnCLoseBatch"").click(function () {
        console.log(""Exit Form Batch."");
    });


    $(""#ChooseGoodReceiptPO"").click(function() {
        const index = T");
            WriteLiteral("bCopyFromGoodReciptPO.row(\'.selected\').index();\r\n        const data = TbCopyFromGoodReciptPO.row(index).data();\r\n        window.location.href = \'");
#nullable restore
#line 2048 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                           Write(Url.Action("CreateGoodReturn","GoodReturn"));

#line default
#line hidden
#nullable disable
            WriteLiteral("?DocNum=\'+data.docNum;\r\n    });\r\n    $(\"#BarCode\").change(function() {\r\n        var barCode = $(\"#BarCode\").val();\r\n        $.ajax({\r\n            url: \'");
#nullable restore
#line 2053 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
             Write(Url.Action("GetBarCodeActionResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            type: ""GET"",
            data: { BarCode: (barCode==="""")?'-':barCode },
            dataType: ""JSON"",
            success: function(data) {
                //alert(""Success"");
                console.log(data);
                if (data.length !== 0) {
                    if (data.length > 1) {
                        $(""#ModalBarCode"").modal(""show"");
                        LBarCode = data;
                        TbBarCode.clear();
                        TbBarCode.rows.add(LBarCode);
                        TbBarCode.search('').draw();
                    } else {
                        var object={};

                        object.itemCode=data[0].itemCode;
                        object.itemName=data[0].itemName;
                        object.price=data[0].price;
                        object.UomName=data[0].uomName;
                        object.manageItem=data[0].manageItem;
                        AddDataToFrom(object);
                    }
                }");
            WriteLiteral(@" else {
                    alert(""Not Found"");
                    EventItemAdd.clearText(
                        [
                            {id:""ItemCode"",value:""""},
                            {id:""ItemDescr"",value:""""},
                            {id:""Qty"",value:""1""},
                            {id:""Price"",value:""0""},
                            {id:""Discount"",value:""0""},
                            {id:""DiscountAmt"",value:""0""},
                            {id:""totalItem"",value:""0""},
                            {id:""txtRowID"",value:""0""},
                            {id:""txtScriptID"",value:""0""},
                            {id:""ItemCodeSerial"",value:""0""},
                            {id:""ItemCodeSerialQty"",value:""0""},
                            {id:""SerialNumber"",value:""0""},
                            {id:""txtManfrSerial"",value:""0""}
                        ],"""");
                    EventItemAdd.clearText([
                            { id: ""UomID"" }
                        ],
 ");
            WriteLiteral(@"                       ""option"");
                }
            },
            error: function(erro) {
                        console.log(erro.responseText);
            }
        });
    });
    $('#TbBarCode tbody').on('click', 'tr', function () {
        var data = TbBarCode.row(this).data();
        AddDataToFrom(data);
        $(""#ModalBarCode"").modal(""hide"");
    });
    function AddDataToFrom(data) {
        console.log(data);
        $('#ItemCode').val(data.itemCode);
        $('#ItemDescr').val(data.itemName);
        $('#Price').val(data.price);
        $('#itemManage').val(data.manageItem);
        $('#totalItem').val(data.price);
        $('#CItemCode').css('background-color', '#4CAF50');
        objectLine = {};
        if(objectLine!=undefined)
        {
            if (data.itemCode !== objectLine.ItemCode) {
                objectLine = {};
            }
        }
        objectLine.ItemCode = data.itemCode;
        objectLine.ManageItem = data.manageItem;
      ");
            WriteLiteral("  objectLine.UomName = data.UomName;\r\n        objectLine.Serial = [];\r\n        GetMasterData.getUomCode(\'");
#nullable restore
#line 2130 "D:\VB\BarCode-System\BarCodeClientService\Views\GoodsReceiptPO\CreatePO.cshtml"
                             Write(Url.Action("GetUomCodeResult", "GoodsReceiptPO"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\',data.itemCode,\"P\");\r\n    }\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
