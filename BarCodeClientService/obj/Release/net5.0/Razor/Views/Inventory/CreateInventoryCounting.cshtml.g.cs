#pragma checksum "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9089d461e658589464940c4a748a7b653ccef8b4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Inventory_CreateInventoryCounting), @"mvc.1.0.view", @"/Views/Inventory/CreateInventoryCounting.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\VB\BarCode-System\BarCodeClientService\Views\_ViewImports.cshtml"
using BarCodeClientService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\VB\BarCode-System\BarCodeClientService\Views\_ViewImports.cshtml"
using BarCodeClientService.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9089d461e658589464940c4a748a7b653ccef8b4", @"/Views/Inventory/CreateInventoryCounting.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"231de61c7d9a254eb8b39190aacae46b82b7984c", @"/Views/_ViewImports.cshtml")]
    public class Views_Inventory_CreateInventoryCounting : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/styles.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/jquery.dataTables.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/rowReorder.dataTables.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/jquery-3.3.1.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/dataTables.rowReorder.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/moment.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/datetime-moment.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/dataTables.buttons.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/dataTables.select.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/dataTables.dateTime.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/DataTable/dataTables.editor.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "DashboardInventory", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Dashboard", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onclick", new global::Microsoft.AspNetCore.Html.HtmlString("return confirm(\'Unsaved data will be lost. Do you want to continue without saving?\')"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "ShowInventory", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "InventoryCounting", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/Array.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
  
    ViewData["Title"] = "InventoryCounting";
    DateTime dt = DateTime.Now;
    ViewData["Date"] = dt.ToShortDateString();

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "9089d461e658589464940c4a748a7b653ccef8b410501", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "9089d461e658589464940c4a748a7b653ccef8b411616", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "9089d461e658589464940c4a748a7b653ccef8b412731", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b413881", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b414921", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b415961", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b417001", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b418041", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b419081", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b420121", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b421162", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b422203", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
            WriteLiteral(@"
<style>
    tr.selected {
        background: red;
        color: red;
    }

    #main {
        position: absolute;
    }

    .color_tap {
        min-width: 60px;
        background-color: #5f95c3;
        color: #ffffff;
        font-weight: 600;
        margin-right: 1px;
    }

    .nav-tabs .nav-link {
        border-radius: 0px 12px 0px 0px;
        border: 1px solid rgb(193, 193, 193);
        height: 40px;
        line-height: 20px;
    }

    .modal {
        z-index: 200000;
    }

    .modal-header {
        background: #5f95c3;
        height: 40px;
        color: #ffffff;
    }

        .modal-header b {
            margin-top: -10px;
        }

    #TbAR table tr td {
        position: relative !important;
        padding: 0px !important;
        height: 35px;
        margin-left: 15px;
        margin-top: 10px;
        background-color: none;
    }

    table tbody tr td {
        background-color: #ffffff;
        color: black;
    }

 ");
            WriteLiteral(@"   table tbody tr.selected td {
        background: #94d8e1;
        color: red;
    }

        table tbody tr.selected td .clsinput {
            background: #94d8e1;
            color: red;
        }

    .clsinput:focus {
        outline: none;
    }

    .BoxScan {
        display: none;
        border: 3px solid black;
        border-radius: 3px 3px;
    }

    input[aria-controls='TbBinLocation']:focus {
        background-color: khaki;
    }

    /* =================================================== */
    .cover-spin {
        position: fixed;
        width: 100%;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background-color: rgba(255,255,255,0.7);
        z-index: 9999;
        display: none;
    }

    ");
            WriteLiteral("@-webkit-keyframes spin {\r\n        from {\r\n            -webkit-transform: rotate(0deg);\r\n        }\r\n\r\n        to {\r\n            -webkit-transform: rotate(360deg);\r\n        }\r\n    }\r\n\r\n    ");
            WriteLiteral(@"@keyframes spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }

    .cover-spin::after {
        content: '';
        display: block;
        position: absolute;
        left: 48%;
        top: 40%;
        width: 40px;
        height: 40px;
        border-style: solid;
        border-color: black;
        border-top-color: transparent;
        border-width: 4px;
        border-radius: 50%;
        -webkit-animation: spin .8s linear infinite;
        animation: spin .8s linear infinite;
    }
    /* =================================================== */
</style>

<script type=""text/javascript"">
    /*DocDate*/
    $(document).ready(function () {
        var now = new Date();
        var day = (""0"" + now.getDate()).slice(-2);
        var month = (""0"" + (now.getMonth() + 1)).slice(-2);
        var today = now.getFullYear() + ""-"" + (month) + ""-"" + (day);

        var minutes = now.getMinutes");
            WriteLiteral(@"();
        var hour = now.getHours();



        var ctime = hour + "":"" + minutes;

        $('#txtCountingDate').val(today);
        //$('#txtCountingTime').val(ctime);

        //==================================
        function AddMinutesToDate(date, minutes) {
            return new Date(date.getTime() + minutes * 60000);
        }
        function DateFormat(date) {
            var days = date.getDate();
            var year = date.getFullYear();
            var month = (date.getMonth() + 1);
            var hours = date.getHours();
            var minutes = date.getMinutes();
            minutes = minutes < 10 ? '0' + minutes : minutes;
            var strTime = days + '/' + month + '/' + year + '/ ' + hours + ':' + minutes;
            return strTime;
        }
        var now = new Date();
        var next = AddMinutesToDate(now, -5);
        var s = new Date(next);

        var minutes = s.getMinutes();
        var hour = s.getHours();

        if (minutes < 10) {
 ");
            WriteLiteral(@"           minutes = '0' + minutes;
        } else {
            minutes = minutes;
        }

        var ctime = hour + "":"" + minutes;

        $('#txtCountingTime').val(ctime);
        //===============================


        //Whs And BinLocation Fig
        //$('#txtWhsCode').val('05');
        //$('#txtWhsName').val('คลังเซล');
        //$('#txtBinCode').val('23494');
        //$('#txtBinName').val('05-1006-R110048');
    });

    function checkBarcodeUDOM() {
        document.getElementById(""divBarcodeUDOM"").style.display = ""block"";
        document.getElementById(""divBarcodeProduct"").style.display = ""none"";
        document.getElementById(""txtScanBarCode01"").focus();

        document.getElementById(""rdoTypeItem1"").checked = false;
        document.getElementById(""rdoTypeItem2"").checked = false;
        document.getElementById(""txtQuantity02"").disabled = true;
        document.getElementById(""txtScanBarCode02"").disabled = true;
        document.getElementById(""txtScanBatc");
            WriteLiteral(@"hSerial02"").disabled = true;
    }

    function checkBarcodeProduct() {
        document.getElementById(""divBarcodeUDOM"").style.display = ""none"";
        document.getElementById(""divBarcodeProduct"").style.display = ""block"";
        document.getElementById(""txtScanBarCode02"").focus();
    }

    function chTypeItem() {
        document.getElementById(""txtQuantity02"").disabled = false;
        document.getElementById(""txtScanBarCode02"").disabled = false;
        document.getElementById(""txtScanBatchSerial02"").disabled = false;
        document.getElementById(""txtScanBarCode02"").focus();
        document.getElementById(""txtQuantity02"").value = ""1"";
        document.getElementById(""txtScanBarCode02"").value = """";
        document.getElementById(""txtScanBatchSerial02"").value = """";
    }

</script>

<div id=""frmLoading"" class=""cover-spin"" style=""display:none""></div>

<div id=""#main"">
");
            WriteLiteral("    <div class=\"row\" style=\"margin-left:5px;margin-top:5px;color:#696969;\">\r\n        <h5 style=\"margin-top:5px;color:#696969;\">\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b429768", async() => {
                WriteLiteral("<i class=\"fas fa-home\"></i> Dashboard");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            <span>\r\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b431289", async() => {
                WriteLiteral("<i class=\"fa fa-caret-right align-right\"></i> Inventory Counting");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_16.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_17.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_17);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                <i class=""fa fa-caret-right align-right""></i> Create InventoryCounting
            </span>
        </h5>
    </div>
    <hr />

    <div style=""padding: 10px; color: #696969;"">
        <ul class=""nav nav-tabs Tap-PA"" id=""mytab"" role=""tablist"">
");
            WriteLiteral(@"            <li class=""nav-item"">
                <a class=""nav-link color_tap"" id=""item-tab"" data-toggle=""tab"" href=""#item"" role=""tab"" aria-controls=""Items"" aria-selected=""false"">Add Data</a>
            </li>
        </ul>
        <div class=""tab-content"" id=""myTabContent"">
");
            WriteLiteral(@"            <div class=""tab-pane fade show active"" id=""item"" role=""tabpanel"" aria-labelledby=""item-tab"" style=""margin-top: 10px"">
                <div class=""row"">
                    <div class=""col-sm-6"">
                        <div>
                            Series :
                            <div class=""input-group"">
                                <div class=""input-group-prepend"">
                                    <button class=""input-group-text"" id=""Cifr""><i id=""btnCheckSeries"" class=""fa fa-check""></i></button>
                                </div>
                                <input type=""text""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 9436, "\"", 9450, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"txtSeries\"");
            BeginWriteAttribute("value", " value=\"", 9466, "\"", 9474, 0);
            EndWriteAttribute();
            WriteLiteral(" autocomplete=\"off\" disabled size=\"7\">\r\n                                <input type=\"text\" class=\"form-control\"");
            BeginWriteAttribute("placeholder", " placeholder=\"", 9586, "\"", 9600, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"txtSeriesName\"");
            BeginWriteAttribute("value", " value=\"", 9620, "\"", 9628, 0);
            EndWriteAttribute();
            WriteLiteral(" autocomplete=\"off\" disabled>\r\n");
            WriteLiteral(@"                            </div>
                        </div>
                        <div>
                            Counting Date :
                            <div class=""input-group"">
                                <input type=""date"" class=""form-control"" id=""txtCountingDate"">
                            </div>
                        </div>
                        <div>
                            Counting Time :
                            <div class=""input-group"">
                                <input type=""text"" class=""form-control"" id=""txtCountingTime"">
                            </div>
                        </div>

");
            WriteLiteral("                        <div style=\"display:none\">\r\n                            Ref2 :\r\n                            <div class=\"input-group\">\r\n                                <input type=\"text\" class=\"form-control\"");
            BeginWriteAttribute("value", " value=\"", 11586, "\"", 11594, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""ref2"">
                            </div>
                        </div>

                        <div>
                            Remark :
                            <div class=""input-group"">
                                <input type=""text"" class=""form-control""");
            BeginWriteAttribute("value", " value=\"", 11873, "\"", 11881, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""comments"">
                            </div>
                        </div>

                    </div>

                    <div class=""col-sm-6"">
                        <div>
                            Warehouse :
                            <div class=""input-group"">
                                <input type=""text"" autocomplete=""off"" disabled size=""7""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 12257, "\"", 12271, 0);
            EndWriteAttribute();
            BeginWriteAttribute("value", " value=\"", 12272, "\"", 12280, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"txtWhsCode\">\r\n                                <input type=\"text\" class=\"form-control\"");
            BeginWriteAttribute("placeholder", " placeholder=\"", 12371, "\"", 12385, 0);
            EndWriteAttribute();
            BeginWriteAttribute("value", " value=\"", 12386, "\"", 12394, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtWhsName"" disabled>
                                <div class=""input-group-append"">
                                    <button class=""input-group-text btnModalWarehouse"" data-toggle=""modal"" data-target=""#ModalWarehouse"">
                                        <i class=""fa fa-search""></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div>
                            Bin Location :
                            <div class=""input-group"">
                                <input type=""text"" autocomplete=""off"" disabled size=""7""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 13070, "\"", 13084, 0);
            EndWriteAttribute();
            BeginWriteAttribute("value", " value=\"", 13085, "\"", 13093, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"txtBinCode\">\r\n                                <input type=\"text\" class=\"form-control\"");
            BeginWriteAttribute("placeholder", " placeholder=\"", 13184, "\"", 13198, 0);
            EndWriteAttribute();
            BeginWriteAttribute("value", " value=\"", 13199, "\"", 13207, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtBinName"" disabled>
                                <div class=""input-group-append"">
                                    <button class=""input-group-text btnModelsToBin"" data-toggle=""modal"" data-target=""#ModalBinLocation"">
                                        <i class=""fa fa-search""></i>
                                    </button>
                                </div>

                                <button class=""btn btn-danger"" data-toggle=""modal"" id=""btnClrBinCode"" onclick=""ClearBinCode();"">
                                    <i class=""fa fa-times""></i>
                                </button>

                            </div>
                        </div>
                        <button class=""btn btn-warning"" id=""btnSearch"" style=""width:100%"" onclick=""fncGetStockWhsBin();""><b>Search</b></button>
                        <button class=""btn btn-danger"" id=""btnClear"" style=""width:100%"" onclick=""ClearTb();""><b>Clear</b></button>
");
            WriteLiteral("                        <br>\r\n");
            WriteLiteral("                        <div id=\"TabScanBarCode\" class=\"BoxScan\">\r\n");
            WriteLiteral(@"
                            <div id=""divBarcodeUDOM"" style=""display: block; "">
                                <div id=""TabQty"" style=""display:block;"">
                                    Input Quantity :
                                    <div class=""input-group"">
                                        <button class=""btn btn-warning"" id=""btnLowerQty"" onclick=""up('9999')""><i class=""fas fa-plus""></i></button>
                                        <input type=""number"" class=""form-control""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 15881, "\"", 15895, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtQuantity01"" value=""1"" style=""background-color: antiquewhite; border: 3px solid #000000; margin: 0 auto; text-align: center; "">
                                        <button class=""btn btn-warning"" id=""btnUpperQty"" onclick=""down('1')""><i class=""fas fa-minus""></i></button>
                                        <button class=""btn btn-warning"" id=""btnResetQty""><i class=""fa fa-times""></i></button>
                                        <button class=""btn btn-warning"" id=""btnUpdateQty"" style=""margin-left:5px; display:none"" onclick=""fncUpdateQty();"">Update Qty</button>
                                    </div>
                                </div>
                                <div>
                                    Scan Barcode :
                                    <div class=""input-group"">
                                        <input type=""text"" class=""form-control""");
            BeginWriteAttribute("value", " value=\"", 16799, "\"", 16807, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtScanBarCode01"" style=""background-color: antiquewhite; border: 3px solid #000000; margin: 0 auto; text-align: center;"" autocomplete=""off"">
                                        <button class=""btn btn-primary"" id=""btnFocusText""><i class=""fa fa-qrcode""></i></button>
                                    </div>
                                    <button class=""input-group-text"" id=""addRow01"" style=""display: none;"" autocomplete=""off""><i class=""fa fa-plus""></i></button>
                                </div>
                            </div>

                            <div id=""divBarcodeProduct"" style=""display:none; "">

                                <center>
                                    <label>
                                        <input type=""radio"" id=""rdoTypeItem1"" name=""typeItem"" value=""Batch"" style=""height: 12px; width: 12px; vertical-align: middle;"" onclick=""chTypeItem()"" />
                                        <font size=""3"" style=""font-weight:bold"">Batch</font>
      ");
            WriteLiteral(@"                              </label>
                                    &nbsp;&nbsp;&nbsp;
                                    <label>
                                        <input type=""radio"" id=""rdoTypeItem2"" name=""typeItem"" value=""Serial"" style=""height: 12px; width: 12px; vertical-align: middle; "" onclick=""chTypeItem()"" />
                                        <font size=""3"" style=""font-weight:bold"">Serial</font>
                                    </label><br>
                                </center>
                                <label>
                                    Input Quantity :
                                </label>
                                <div class=""input-group"">
                                    <input type=""number"" class=""form-control""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 18630, "\"", 18644, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtQuantity02"" value=""1"" style=""background-color: antiquewhite; border: 3px solid #000000; margin: 0 auto; text-align: center;"" autocomplete=""off"" disabled>
                                </div>

                                <label>
                                    Scan Barcode :
                                </label>
                                <div class=""input-group"">
                                    <input type=""text"" class=""form-control""");
            BeginWriteAttribute("value", " value=\"", 19119, "\"", 19127, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtScanBarCode02"" style=""background-color: antiquewhite; border: 3px solid #000000; margin: 0 auto; text-align: center;"" autocomplete=""off"" disabled>
                                </div>

                                <label>
                                    Scan Batch/Serial :
                                </label><div class=""input-group"">
                                    <input type=""text"" class=""form-control""");
            BeginWriteAttribute("value", " value=\"", 19566, "\"", 19574, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtScanBatchSerial02"" style=""background-color: antiquewhite; border: 3px solid #000000; margin: 0 auto; text-align: center;"" autocomplete=""off"" disabled>
                                </div>
                                <button class=""input-group-text"" id=""addRow02"" style=""display:none;""><i class=""fa fa-plus""></i></button>
                            </div>

                        </div>
");
            WriteLiteral("\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n");
            WriteLiteral(@"            <div class=""row"">
                <div class=""col-sm-12"" id=""tbDataLine"" style=""display: none;"">
                    <font size=""+1""><b>List Data Line</b></font>
                    <div class=""table-responsive"">
                        <table id=""TbLineStock"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background:#f0eff1;color:#696969;"">
                            <thead>
                                <tr>
                                    <th>ItemCode</th>
                                    <th>ItemName</th>
                                    <th>WarehouseCode</th>
                                    <th>WarehouseName</th>
                                    <th>BinLocationCode</th>
                                    <th>BinLocationName</th>
                                    <th>Quantity</th>
                                    <th>UOMEntry</th>
                                    <th>UOMCode</th>
                 ");
            WriteLiteral(@"                   <th>BatchYN</th>
                                    <th>SerialYN</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <hr>
                    <font size=""+1""><b>List Data From Scan</b></font><br>
                    <div class=""row"">
                        <div class=""col"">
                            <button id=""btnDelRow"" class=""btn btn-info"">&nbsp;Delete Row&nbsp;</button>
                        </div>
                        <div class=""col"" align=""right"">
                            <button id=""btnNewItem"" class=""btn btn-success"" data-toggle=""modal"" data-target=""#ModalFormAddItem"">&nbsp;Add Item&nbsp;</button>
                        </div>
                    </div>

                    <table id=""TbLineScan"" class=""table table-striped table-bordered table-condensed dt-responsive nowrap text-xsmall"" style=""width: 100%; background: #f0eff1; color: #696969;"">
");
            WriteLiteral(@"                        <thead>
                            <tr>
                                <th>ItemCode</th>
                                <th>ItemName</th>
                                <th>Quantity</th>
                                <th>Warehouse</th>
                                <th>BinEntry</th>
                                <th>BinLocation</th>
                                <th>UOMCode</th>
                                <th>ExpDate</th>
                                <th>BatchNumber</th>
                                <th>SerialNumber</th>
");
            WriteLiteral(@"                            </tr>
                        </thead>
                    </table>
                </div>
            </div>

        </div>
    </div>
    <div class=""row"" style=""padding: 15px;margin-top:-20px;margin-bottom:-20px;"">
        <div class=""nav navbar-nav ml-auto"">
            <div class=""btn-group"">
                <button class=""btn btn-success"" id=""btnSave"" style=""margin-left: 5px; display: none;"" onclick=""POSTDataAPI()"">Send To SAP</button>
            </div>
        </div>
    </div>

</div>


");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalCusCode"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background:#f0eff1;color:#696969;"">
            <div class=""modal-header"">
                <b>List of Customer</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <table id=""TbCusCode"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background:#f0eff1;color:#696969;"">
                                <thead>
                                    <tr>
                                        <th>Customer Code</th>
                                        <th>Cusetomer Name</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
   ");
            WriteLiteral(@"             </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""ChooseCus"" style=""background:#f0eff1;color:#696969;"">Choose</button>
                <button class=""btn btn-info"" data-dismiss=""modal"" style=""background:#f0eff1;color:#696969;"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalWarehouse"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background:#f0eff1;color:#696969;"">
            <div class=""modal-header"">
                <b>List of Warehouse</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <table id=""TbWhs"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background:#f0eff1;color:#696969;"">
                                <thead>
                                    <tr>
                                        <th>WhsCode</th>
                                        <th>WhsName</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                <");
            WriteLiteral(@"/div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""ChooseWhs"" style=""background:#f0eff1;color:#696969;"">Choose</button>
                <button class=""btn btn-info"" data-dismiss=""modal"" style=""background:#f0eff1;color:#696969;"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalBinLocation"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background:#f0eff1;color:#696969;"">
            <div class=""modal-header"">
                <b>List of Bin Location</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <table id=""TbBinLocation"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background:#f0eff1;color:#696969;"">
                                <thead>
                                    <tr>
                                        <th>BinCode</th>
                                        <th>BinName</th>
                                        <th>BinEntry</th>
                                    </tr>
                                </thead>
                            </table>
     ");
            WriteLiteral(@"                   </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""ChooseBinLocation"" style=""background:#f0eff1;color:#696969;"">Choose</button>
                <button class=""btn btn-info"" data-dismiss=""modal"" style=""background:#f0eff1;color:#696969;"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalSaleEmployee"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background:#f0eff1;color:#696969;"">
            <div class=""modal-header"">
                <b>List of Sale Employee</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <table id=""TbSaleEmployee"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background:#f0eff1;color:#696969;"">
                                <thead>
                                    <tr>
                                        <th>SlpCode</th>
                                        <th>SlpName</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
 ");
            WriteLiteral(@"               </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""ChooseSlp"" style=""background:#f0eff1;color:#696969;"">Choose</button>
                <button class=""btn btn-info"" data-dismiss=""modal"" style=""background:#f0eff1;color:#696969;"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalSeries"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background:#f0eff1;color:#696969;"">
            <div class=""modal-header"">
                <b>List of Series</b>
            </div>
            <div class=""modal-body"">
                <div class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <table id=""TbSeries"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background:#f0eff1;color:#696969;"">
                                <thead>
                                    <tr>
                                        <th>Series</th>
                                        <th>SeriesName</th>
                                        <th>YYYY-MM</th>
                                    </tr>
                                </thead>
                            </table>
                    ");
            WriteLiteral(@"    </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""ChooseSeries"" style=""background:#f0eff1;color:#696969;"">Choose</button>
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""CloseSeries"" style=""background:#f0eff1;color:#696969;"">Close</button>
            </div>
        </div>
    </div>
</div>

");
            WriteLiteral(@"<div class=""modal fade"" id=""ModalFormAddItem"">
    <div class=""modal-dialog modal-xl"">
        <div class=""modal-content"" style=""background:#f0eff1;color:#696969;"">
            <div class=""modal-header"">
                <b>List of Item</b>
            </div>
            <div class=""modal-body"">
                <div id=""tbListItem"" class=""table-responsive"">
                    <div class=""row"">
                        <div class=""col-sm-12"">
                            <b>Select Item</b>
                                              <div id=""divhidden"" style=""display:none"">
                                                  <input type=""text"" autocomplete=""off"" id=""txtAWhsCode"" disabled>
                                                  <input type=""text"" autocomplete=""off"" id=""txtAWhsName"" disabled>
                                                  <input type=""text"" autocomplete=""off"" id=""txtABinEntry"" disabled>
                                                  <input type=""text"" autocomplete=""");
            WriteLiteral(@"off"" id=""txtABinCode"" disabled>
                                                  <input type=""text"" autocomplete=""off"" id=""txtGetItemsYN"" disabled>
                                              </div>

                            <table id=""TbItems"" class=""table table-striped table-bordered dt-responsive nowrap"" width=""100%"" cellspacing=""0"" style=""background:#f0eff1;color:#696969;"">
                                <thead>
                                    <tr>
                                        <th>ItemCode</th>
                                        <th>ItemName</th>
                                        <th>UOM</th>
                                        <th>BatchYN</th>
                                        <th>SerialYN</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>

                </div>

                    <div class=""row"">
          ");
            WriteLiteral(@"              <div class=""col-sm-12"">
                            <b style=""color:goldenrod"">Selected Item : </b><br>
                            <b>ItemCode : </b>
                            <div class=""input-group"">
                                <input type=""text"" autocomplete=""off""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 33234, "\"", 33248, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtItemCodeSelected"" class=""form-control"" disabled>
                            </div>

                            <b>ItemName : </b>
                            <div class=""input-group"">
                                <input type=""text"" autocomplete=""off""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 33517, "\"", 33531, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtItemNameSelected"" class=""form-control"" disabled>
                            </div>

                            Input Quantity :
                            <div class=""input-group"">
                                <input type=""number"" class=""form-control""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 33802, "\"", 33816, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"txtQuantitySelected\" value=\"1\">\r\n                            </div>\r\n\r\n                            <b>BarCode/QRCode : </b>\r\n                            <div class=\"input-group\">\r\n                                <input type=\"text\" autocomplete=\"off\"");
            BeginWriteAttribute("placeholder", " placeholder=\"", 34071, "\"", 34085, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"txtbatchserialno\" class=\"form-control\">\r\n                            </div>\r\n\r\n                            <div class=\"input-group\">\r\n                                UOM : <input type=\"text\" autocomplete=\"off\"");
            BeginWriteAttribute("placeholder", " placeholder=\"", 34300, "\"", 34314, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"txtUomSelected\" size=\"7\" disabled>\r\n                                &nbsp;\r\n                                BatchYN : <input type=\"text\" autocomplete=\"off\"");
            BeginWriteAttribute("placeholder", " placeholder=\"", 34475, "\"", 34489, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"txtBatchYNSelected\" size=\"7\" disabled>\r\n                                &nbsp;\r\n                                SerialYN : <input type=\"text\" autocomplete=\"off\"");
            BeginWriteAttribute("placeholder", " placeholder=\"", 34655, "\"", 34669, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""txtSerialYNSelected"" size=""7"" disabled>
                            </div>
                        </div>
                        </div>
                </div>
            <div class=""modal-footer"">
                <button class=""btn btn-info"" data-dismiss=""modal"" id=""btnAddItem"">Add</button>
                <button class=""btn btn-danger"" data-dismiss=""modal""");
            BeginWriteAttribute("style", " style=\"", 35043, "\"", 35051, 0);
            EndWriteAttribute();
            WriteLiteral(" id=\"btnCLoseItem\">Close</button>\r\n            </div>\r\n            </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9089d461e658589464940c4a748a7b653ccef8b462458", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script type=""text/javascript"">
    document.getElementById(""frmLoading"").style.display = ""block"";

    function ClearBinCode() {
        document.getElementById(""txtBinCode"").value = '';
        document.getElementById(""txtBinName"").value = '';
    }

    //+++++ Series Code +++++
    $.ajax({
        type: ""GET"",
        url: """);
#nullable restore
#line 754 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
         Write(Url.Action("GetSeriesCode", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
        contentType: ""application/json; charset=utf-8"",
        dataType: ""json"",
        dataSrc: 'data',
        success: function (data) {
            jqueryXml = $(data);
            //console.log(jqueryXml);
            console.log(""GET Series Complete."");
            $('#txtSeries').val(jqueryXml[0].data[0].series);
            $('#txtSeriesName').val(jqueryXml[0].data[0].seriesName);
            //style = ""color:green"",btnCheckSeries,style=""background-color:red
            document.getElementById(""Cifr"").style.backgroundColor = ""green"";
            document.getElementById(""btnCheckSeries"").style.color = ""#FFFFFF"";
            document.getElementById(""frmLoading"").style.display = ""none"";
        },
        error: function (err) {
            document.getElementById(""frmLoading"").style.display = ""none"";
        }
    });

    // Get SaleEmployee
    //var tableSlp = $('#TbSaleEmployee').DataTable({});

    //+++++ Get Warehouse +++++
    var tableWhs = $('#TbWhs').DataTable({
");
            WriteLiteral("        \"ajax\": {\r\n            \"url\": \'");
#nullable restore
#line 780 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
               Write(Url.Action("GetWarehouse", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            ""type"": ""GET"",
            ""dataType"": ""JSON"",
            ""dataSrc"": 'data',
            ""complete"": function (data) {
                console.log(""GET Warehouse Complete."");
            }
        },
        ""columns"": [
            { ""data"": ""whsCode"" },
            { ""data"": ""whsName"" },
        ],
        ""paging"": true,
        ""pageLength"": 10,
        ""ordering"": false,
        ""info"": false,
        ""select"": true
    });

    tableWhs.on('select', function () {
        var cellCode = tableWhs.rows({ selected: true }).data()[0]['whsCode'];
        var cellName = tableWhs.rows({ selected: true }).data()[0]['whsName'];

        $('#ChooseWhs').click(function () {
            var xCode = document.getElementById(""txtWhsCode"");
            var xName = document.getElementById(""txtWhsName"");
            xCode.value = cellCode;
            xName.value = cellName;
        });
    });

    //+++++ GetToBinLocation +++++
    var LBins = [];

    $('#TbBinLocation'");
            WriteLiteral(@").DataTable({
        bLengthChange: false,
        binfo: false,
        data: LBins,
        language: {
            emptyTable: ""Loading ...""
        },
        columns: [
            { data: ""binCode"", autoWidth: true },
            { data: ""whsCode"", autoWidth: true },
            { data: ""absEntry"", autoWidth: true }
        ],
        pageLength: 10,
        select: true,
        paging: true,
        ordering: false,
        info: false
    });

    var tbBin = $('#TbBinLocation').DataTable();

    $("".btnModelsToBin"").click(function () {
        if ($('#txtWhsCode').val() != '') {
            $(""#ModalBinLocation"").modal({ backdrop: ""static"" });
                $.ajax({
                    url: '");
#nullable restore
#line 839 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
                     Write(Url.Action("GetBinLocationWhs", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                    data: { whscode: $('#txtWhsCode').val() },
                    type: ""GET"",
                    dataType: ""JSON"",
                    success: function (data) {
                        //console.log(data);
                        LBins = []
                        LBins = data.data
                        tbBin.clear();
                        tbBin.rows.add(LBins);
                        tbBin.draw();

                        $(""input[aria-controls='TbBinLocation']"").focus();
                    }
                });
            } else {
                alert('To Warehouse Empty!');
                return false;
            }

        });

    //Form Add Item New
    var LItems = [];
    var TbItems = $('#TbItems').DataTable({
        bLengthChange: false,
        binfo: false,
        data: LItems,
        language: {
            emptyTable: ""Loading ...""
        },
        columns: [
            { data: ""itemCode"", autoWidth: true },
            { da");
            WriteLiteral(@"ta: ""itemName"", autoWidth: true },
            { data: ""uom"", autoWidth: true },
            { data: ""batchYN"", autoWidth: true },
            { data: ""serialYN"", autoWidth: true }
        ],
        pageLength: 5,
        select: true,
        paging: true,
        ordering: false,
        info: false
    });

    $('#TbItems tbody').on('click', 'tr', function () {
        if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
        } else {
            TbItems.$('tr.selected').removeClass('selected');
            $(this).addClass('selected');
        }
    });

    var tbline1 = [];
    var tbline2 = [];

    $('#btnNewItem').click(function () {
        //TbItems
        //alert('Openning Form');
        LItems = [];
        tbline1 = [];
        tbline2 = [];
        console.log('Cleared');
        if ($('#txtItemCodeSelected').val() != '') {
            $('#txtItemCodeSelected').val('');
            $('#txtItemNameSelected').val('');
          ");
            WriteLiteral(@"  $('#txtQuantitySelected').val('1');
            $('#txtbatchserialno').val('');
            $('#txtUomSelected').val('');
            $('#txtBatchYNSelected').val('');
            $('#txtSerialYNSelected').val('');
        }

        console.log('Items Master Loading..');
        var whsCode = document.getElementById(""txtWhsCode"").value;
        var whsName = document.getElementById(""txtWhsName"").value;
        var binCode = document.getElementById(""txtBinCode"").value;
        var binEntry = document.getElementById(""txtBinName"").value;

        $('#txtAWhsCode').val(whsCode);
        $('#txtAWhsName').val(whsName);
        $('#txtABinEntry').val(binCode);
        $('#txtABinCode').val(binEntry);

        //$(""#ModalFormAddItem"").modal({ backdrop: ""static"" });
        if ($('#txtGetItemsYN').val() == 'Y') {
            console.log('Get Items Complete');
            TbItems.rows('.selected').nodes().to$().removeClass('selected');
            //LItems = [];
            //LItems = itm.dat");
            WriteLiteral("a;\r\n            //TbItems.clear();\r\n        }\r\n        else {\r\n            $.ajax({\r\n                url: \'");
#nullable restore
#line 934 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
                 Write(Url.Action("GetListItemMaster", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                type: ""GET"",
                dataType: ""JSON"",
                success: function (itm) {
                    console.log('Items Master Complete..');
                    console.log(itm);
                    LItems = [];
                    LItems = itm.data;
                    //TbItems.clear();
                    TbItems.rows.add(LItems);
                    TbItems.search("""").draw();
                    $('#txtGetItemsYN').val('Y');
                }
            });
        }
        //jQuery.noConflict();
        //$(""#ModalFormAddItem"").modal(""show"");
    });

    TbItems.on('click', 'tr', function () {

        var data = TbItems.row(this).data();
        console.log(data);
        //alert('itemCode is ' + data['itemCode']);

            var xitemCode = document.getElementById(""txtItemCodeSelected"");
            var xitemName = document.getElementById(""txtItemNameSelected"");
            var xuom = document.getElementById(""txtUomSelected"");
            var ");
            WriteLiteral(@"xbatchYN = document.getElementById(""txtBatchYNSelected"");
            var xserialYN = document.getElementById(""txtSerialYNSelected"");

        xitemCode.value = data['itemCode'];
        xitemName.value = data['itemName'];
        xuom.value = data['uom'];
        xbatchYN.value = data['batchYN'];
        xserialYN.value = data['serialYN'];

        if (xbatchYN.value == 'Y' || xserialYN.value == 'Y') {
            $('#txtbatchserialno').focus();
        }

    });

    $('#btnCLoseItem').click(function () {
        tbline1 = [];
        tbline2 = [];
        $('#txtItemCodeSelected').val('');
        $('#txtItemNameSelected').val('');
        $('#txtQuantitySelected').val('1');
        $('#txtbatchserialno').val('');
        $('#txtUomSelected').val('');
        $('#txtBatchYNSelected').val('');
        $('#txtSerialYNSelected').val('');
    });

    $('#btnAddItem').click(function () {

        //Add Line Data
        tbline1 = [];
        tbline1.push({
            ""itemCode");
            WriteLiteral(@""": $('#txtItemCodeSelected').val(),
            ""itemName"": $('#txtItemNameSelected').val(),
            ""whsCode"": $('#txtAWhsCode').val(),
            ""whsName"": $('#txtAWhsName').val(),
            ""binCode"": $('#txtABinCode').val(),
            ""binEntry"": $('#txtABinEntry').val(),
            ""quantity"": $('#txtQuantitySelected').val(),
            ""uomEntry"": $('#txtUomSelected').val(),
            ""uomCode"": $('#txtUomSelected').val(),
            ""batchYN"": $('#txtBatchYNSelected').val(),
            ""serialYN"": $('#txtSerialYNSelected').val(),
        });
        //console.log(tbline1);
        //TbItems.clear();

        tline.rows.add(tbline1);
        tline.search('').draw();


        var b_number;
        var s_number;
        if ($('#txtBatchYNSelected').val() == 'Y' && $('#txtSerialYNSelected').val() == 'N') {
            b_number = $('#txtbatchserialno').val();
            s_number = '';
        }
        else if ($('#txtBatchYNSelected').val() == 'N' && $('#txtSerial");
            WriteLiteral(@"YNSelected').val() == 'Y') {
            b_number = '';
            s_number = $('#txtbatchserialno').val();
        }
        else if ($('#txtBatchYNSelected').val() == 'N' && $('#txtSerialYNSelected').val() == 'N') {
            b_number = '';
            s_number = '';
        }

        //Add Line From Scan
        tbline2 = [];
        tbline2.push([
            $('#txtItemCodeSelected').val(),
            $('#txtItemNameSelected').val(),
            $('#txtQuantitySelected').val(),
            $('#txtAWhsCode').val(),
            $('#txtABinEntry').val(),
            $('#txtABinCode').val(),
            $('#txtUomSelected').val(),
            '',
            b_number,
            s_number
        ]);
        t.rows.add(tbline2);
        t.search('').draw();
        ////tline.search('').draw();

    });


    tbBin.on('select', function () {
        var cellbinCode = tbBin.rows({ selected: true }).data()[0]['binCode'];
        var cellAbsEntry = tbBin.rows({ selected: true");
            WriteLiteral(@" }).data()[0]['absEntry'];
        $('#ChooseBinLocation').click(function () {
            var txtToBinCode = document.getElementById(""txtBinCode"");
            var txtBinEntry = document.getElementById(""txtBinName"");
            txtToBinCode.value = cellAbsEntry;
            txtBinEntry.value = cellbinCode;
        });
    });



    //GET Stock Whs Bin
    var tline = $('#TbLineStock').DataTable();
    function fncGetStockWhsBin() {
        console.log(""Data Loading..."");
        document.getElementById(""frmLoading"").style.display = ""block"";
        document.getElementById(""btnSearch"").disabled = true;
        document.getElementById(""btnSearch"").style.display = ""none"";
        if (document.getElementById(""txtWhsName"").value != '') {
            //01-A09-02-A62
            var WhsCode = document.getElementById(""txtWhsCode"");
            var BinName = document.getElementById(""txtBinName"");
            $.noConflict();
            $.ajax({
            url: '");
#nullable restore
#line 1075 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
             Write(Url.Action("GetStock_WhsBin", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            data: { whsCode: WhsCode.value, binCode: BinName.value},
            type: ""GET"",
            dataType: ""JSON"",
            ""dataSrc"": 'data',
                success: function (data) {
                    document.getElementById(""tbDataLine"").style.display = ""block"";
                    document.getElementById(""btnSave"").style.display = ""block"";
                    document.getElementById(""TabScanBarCode"").style.display = ""block"";

                    tline = $('#TbLineStock').DataTable({
                    ""dom"": ""Bfrltip"",
                    ""bDestroy"": true,
                    ""aaData"": data.data,
                    ""autoWidth"": true,
                    ""responsive"": true,
                    ""lengthChange"": false,
                    ""ordering"": true,
                    ""pageLength"": 20,
                    ""lengthMenu"": [
                            [20, 50, 100, 200, -1],
                            [20, 50, 100, 200, ""All""]
                    ],
           ");
            WriteLiteral(@"         ""columns"": [
                        { ""data"": ""itemCode"", ""autoWidth"": true },
                        { ""data"": ""itemName"", ""autoWidth"": true },
                        { ""data"": ""whsCode"", ""autoWidth"": true },
                        { ""data"": ""whsName"", ""autoWidth"": true },
                        { ""data"": ""binCode"", ""autoWidth"": true },
                        { ""data"": ""binEntry"", ""autoWidth"": true },
                        { ""data"": ""quantity"", ""autoWidth"": true },
                        { ""data"": ""uomEntry"", ""autoWidth"": true },
                        { ""data"": ""uomCode"", ""autoWidth"": true },
                        { ""data"": ""batchYN"", ""autoWidth"": true },
                        { ""data"": ""serialYN"", ""autoWidth"": true }
                    ],
                    ""language"": { ""emptyTable"": ""No Data"" },
                    ""order"": [[1, 'desc']],
                    ""info"": false,
                    ""searching"": false
                });
                    tline.colum");
            WriteLiteral(@"ns([2, 4, 7, 8]).visible(false, false);
                    //, 9, 10
                    //document.getElementById(""scanbarcode"").focus();
                //alert(""Download Data Complete"");
                    console.log(""Download Data Complete"");
                    document.getElementById(""frmLoading"").style.display = ""none"";
                    $('#txtScanBarCode01').val("""");
                    $('#txtScanBarCode01').focus();
            }
            });

            //$('#TbLineStock tbody').empty();
        } else {
            alert(""Please Select Warehouse"");
            document.getElementById(""frmLoading"").style.display = ""none"";
        }
    }

    function ClearTb() {
        location.reload();
    }

    function fncUpdateQty() {
        document.getElementById(""txtUpdQty"").value = document.getElementById(""Quantity"").value;
    }

    //Add Data In Row
    var t = $('#TbLineScan').DataTable({
        ""dom"": ""Bfrltip"",
        ""bDestroy"": true,
        ""autoWidth""");
            WriteLiteral(@": true,
        ""responsive"": true,
        ""lengthChange"": true,
        ""ordering"": true,
        ""pageLength"": 20,
         ""columns"": [
            { ""width"": ""20%"", ""targets"": 0 },
            { ""width"": ""20%"", ""targets"": 0 },
            { ""width"": ""20%"", ""targets"": 0 },
            { ""width"": ""20%"", ""targets"": 0 },
            { ""width"": ""20%"", ""targets"": 0 },
            { ""width"": ""20%"", ""targets"": 0 },
            { ""width"": ""20%"", ""targets"": 0 },
            { ""width"": ""20%"", ""targets"": 0 },
            { ""width"": ""20%"", ""targets"": 0 },
            { ""width"": ""20%"", ""targets"": 0 }
        ],
        ""lengthChange"": false,
        ""select"": true,
        ""ordering"": false,
        ""info"": false,
        ""searching"": false,
        ""scrollX"": true,
        ""scrollY"": false
    });
    // { ""width"": ""20%"", ""targets"": 0 },
    //BarcodeUDOM
    $('#addRow01').on('click', function () {

        if ($('#txtScanBarCode01').val() != '') {

            var txtScanBarCode = doc");
            WriteLiteral(@"ument.getElementById(""txtScanBarCode01"").value;
            const strArr = txtScanBarCode.split("";"");
            //document.getElementById(""demo"").innerHTML = StrBarCodeArr[4];
            var sItemCode = strArr[0];
            var sBatch = strArr[1];
            var sSerial = strArr[2];
            var sBatchSerial;
            var sBinEntry = document.getElementById(""txtBinName"").value;
            //var sBinEntry = '05-1048';
            console.log(""INPUT: "" + txtScanBarCode);
            $('#txtScanBarCode01').val("""");
            $('#txtScanBarCode01').focus();

            // For Batch
            if (sBatch != '') {
                sBatchSerial = sBatch;
                $.ajax({
                    url: '");
#nullable restore
#line 1194 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
                     Write(Url.Action("GetStockItemBatchBin", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                    data: { itemcode: sItemCode, batchnumber: sBatchSerial, binentry: sBinEntry },
                    type: ""GET"",
                    dataType: ""JSON"",
                    ""dataSrc"": 'data',
                    success: function (data) {
                        var jqueryXml = $(data);
                        if (jqueryXml[0].data.length != 0) {

                            var bItemCode = jqueryXml[0].data[0].itemCode;
                            var bItemName = jqueryXml[0].data[0].itemName;
                            var bQuantity = document.getElementById(""txtQuantity01"").value;
                            var bWhsCode = jqueryXml[0].data[0].whsCode;
                            var bBinEntry = jqueryXml[0].data[0].binEntry;
                            var bBinCode = jqueryXml[0].data[0].binCode;
                            var bUOMCode = jqueryXml[0].data[0].uomCode;
                            var bBatchNumber = jqueryXml[0].data[0].batchNumber;
                    ");
            WriteLiteral(@"        var bSerialNumber = jqueryXml[0].data[0].serialNumber;
                            var bTotalQuantity = jqueryXml[0].data[0].quantity

                            //if (bSerialNumber != '') { bSerialNumber = bSerialNumber } else { bSerialNumber = '' }
                            var bExpDate = jqueryXml[0].data[0].expDate;
                            if (bExpDate == '1899-12-30T00:00:00') {
                                bExpDate = '';
                            } else {
                                bExpDate = bExpDate;
                            }
                            t.row.add([
                                bItemCode,
                                bItemName,
                                bQuantity,
                                bWhsCode,
                                bBinEntry,
                                bBinCode,
                                bUOMCode,
                                bExpDate,
                                bBatchNumber,
         ");
            WriteLiteral(@"                       ''
                            ]).draw(false);

                            $('#txtScanBarCode01').val("""");
                            $('#txtScanBarCode01').focus();

                        } else {
                            alert(""Batch Number does not exist.\r\nไม่มีเลข Batch ใน Bin Location นี้"");
                            $('#txtScanBarCode01').val("""");
                            $('#txtScanBarCode01').focus();
                        }

                    }

                });
            }
            // For Serial
            else if (sSerial != '') {
                sBatchSerial = sSerial;
                $.ajax({
                    url: '");
#nullable restore
#line 1251 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
                     Write(Url.Action("GetStockItemSerialBin", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                    data: { itemcode: sItemCode, serialnumber: sBatchSerial, binentry: sBinEntry },
                    type: ""GET"",
                    dataType: ""JSON"",
                    ""dataSrc"": 'data',
                    success: function (data) {
                        var jqueryXml = $(data);
                        if (jqueryXml[0].data.length != 0) {
                            //=========================
                            //jqueryXml[0].data[0].quantity
                            //jqueryXml[0].data[0].batchNumber
                            //jqueryXml[0].data[0].serialNumber
                            var bItemCode = jqueryXml[0].data[0].itemCode;
                            var bItemName = jqueryXml[0].data[0].itemName;
                            var bQuantity = document.getElementById(""txtQuantity01"").value;
                            var bWhsCode = jqueryXml[0].data[0].whsCode;
                            var bBinEntry = jqueryXml[0].data[0].binEntry;
    ");
            WriteLiteral(@"                        var bBinCode = jqueryXml[0].data[0].binCode;
                            var bUOMCode = jqueryXml[0].data[0].uomCode;
                            var bBatchNumber = jqueryXml[0].data[0].batchNumber;
                            var bSerialNumber = jqueryXml[0].data[0].serialNumber;
                            var bTotalQuantity = jqueryXml[0].data[0].quantity
                            //if (bSerialNumber != '') { bSerialNumber = bSerialNumber } else { bSerialNumber = '' }
                            var bExpDate = jqueryXml[0].data[0].expDate;
                            if (bExpDate == '1899-12-30T00:00:00') {
                                bExpDate = '';
                            } else {
                                bExpDate = bExpDate;
                            }
                            // Check Serial duplicate [1 Only]
                            for (let chks = 0; chks < t.column(0).data().length; chks++) {
                                var data = t.");
            WriteLiteral(@"row(chks).data();
                                //console.log(""Serial Line : "" + chks);
                                //console.log(data[9]);
                                if (bBatchNumber == data[9] && bBatchNumber != '') {
                                    console.log(""Item :"" + bItemCode + "", Serial duplicate -> "" + bBatchNumber);
                                    alert(""Item:"" + bItemCode + "", Serial duplicate->"" + bBatchNumber);
                                    return false;
                                }
                            }

                            t.row.add([
                                bItemCode,
                                bItemName,
                                bQuantity,
                                bWhsCode,
                                bBinEntry,
                                bBinCode,
                                bUOMCode,
                                bExpDate,
                                '',
                         ");
            WriteLiteral(@"       bBatchNumber
                            ]).draw(false);

                            $('#txtScanBarCode01').val("""");
                            $('#txtScanBarCode01').focus();
                        }
                        else {
                            alert(""Serial Number does not exist.\r\nไม่มีเลข Serial ใน Bin Location นี้"");
                            $('#txtScanBarCode01').val("""");
                            $('#txtScanBarCode01').focus();
                        }

                    }
                });
            }
            // For No Serial No Batch
            else if (sSerial == '' && sBatch == '') {
                console.log('No Serial And No Batch But ItemCode : ' + sItemCode);
                $.ajax({
                    url: '");
#nullable restore
#line 1321 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
                     Write(Url.Action("GetItemByBinCode", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                    data: { itemcode: sItemCode, binCode: sBinEntry},
                    type: ""GET"",
                    dataType: ""JSON"",
                    ""dataSrc"": 'data',
                    success: function (val) {
                        var jqueryXml = $(val);
                        //console.log(val);
                        if (jqueryXml[0].data.length != 0) {

                            var bItemCode = jqueryXml[0].data[0].itemCode;
                            var bItemName = jqueryXml[0].data[0].itemName;
                            var bQuantity = document.getElementById(""txtQuantity01"").value;
                            var bWhsCode = jqueryXml[0].data[0].whsCode;
                            var bBinEntry = jqueryXml[0].data[0].binEntry;
                            var bBinCode = jqueryXml[0].data[0].binCode;
                            var bUOMCode = jqueryXml[0].data[0].uomCode;
                            var bBatchNumber = '';
                            var bSer");
            WriteLiteral(@"ialNumber = '';

                            var bExpDate = jqueryXml[0].data[0].expDate;
                            if (bExpDate == '1899-12-30T00:00:00') {
                                bExpDate = '';
                            } else {
                                bExpDate = bExpDate;
                            }
                            t.row.add([
                                bItemCode,
                                bItemName,
                                bQuantity,
                                bWhsCode,
                                bBinEntry,
                                bBinCode,
                                bUOMCode,
                                bExpDate,
                                '',
                                ''
                            ]).draw(false);

                            $('#txtScanBarCode01').val("""");
                            $('#txtScanBarCode01').focus();

                        }
                        else {");
            WriteLiteral(@"
                            alert(""ไม่มี Item Barcode ใน Bin Location นี้"");
                            $('#txtScanBarCode01').val("""");
                            $('#txtScanBarCode01').focus();
                        }

                    }

                });
            }
        }
    });
    $('#addRow01').click();

    var input01 = document.getElementById(""txtScanBarCode01"");
    input01.addEventListener(""keyup"", function (event) {
        if (event.keyCode === 13) {
            event.preventDefault();
            document.getElementById(""addRow01"").click();
        }
    });


    //BarcodeProduct
    $('#addRow02').on('click', function () {

        if ($('#txtScanBatchSerial02').val()!='') {

            var getSelectedValue = document.querySelector('input[name=""typeItem""]:checked');
            if (getSelectedValue != null) {
                if (getSelectedValue.value == ""Batch"") {
                     if ($('#txtScanBatchSerial02').val()!='') {
               ");
            WriteLiteral("         $.ajax({\r\n                            url: \'");
#nullable restore
#line 1397 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
                             Write(Url.Action("GetStockItemBatchBin", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                            data: { itemcode: $('#txtScanBarCode02').val(), batchnumber: $('#txtScanBatchSerial02').val(), binentry: $('#txtBinName').val()},
                            type: ""GET"",
                            dataType: ""JSON"",
                            ""dataSrc"": 'data',
                            success: function (data) {
                                var jqueryXml = $(data);
                                if (jqueryXml[0].data.length != 0) {
                                    //=========================
                                    var bItemCode = jqueryXml[0].data[0].itemCode;
                                    var bItemName = jqueryXml[0].data[0].itemName;
                                    var bQuantity = document.getElementById(""txtQuantity02"").value;
                                    var bWhsCode = jqueryXml[0].data[0].whsCode;
                                    var bWhsEntry = jqueryXml[0].data[0].whsEntry;
                                    var ");
            WriteLiteral(@"bBinCode = jqueryXml[0].data[0].binCode;
                                    var bBinEntry = jqueryXml[0].data[0].binEntry;
                                    var bUOMCode = jqueryXml[0].data[0].uomCode;
                                    var bBatchNumber = jqueryXml[0].data[0].batchNumber;
                                    var bSerialNumber = jqueryXml[0].data[0].serialNumber;
                                    //if (bSerialNumber != '') { bSerialNumber = bSerialNumber } else { bSerialNumber = '' }
                                    var bExpDate = jqueryXml[0].data[0].expDate;
                                    if (bExpDate == '1899-12-30T00:00:00') {
                                        bExpDate = '';
                                    } else {
                                        bExpDate = bExpDate;
                                    }

                                    if ($('#txtScanBarCode02').val() != '') {
                                        t.row.add([
           ");
            WriteLiteral(@"                                 bItemCode,
                                            bItemName,
                                            bQuantity,
                                            bWhsCode,
                                            bBinEntry,
                                            bBinCode,
                                            bUOMCode,
                                            bExpDate,
                                            bBatchNumber,
                                            ''
                                        ]).draw(false);
                                    } else {
                                        return false;
                                    }

                                    $('#txtScanBarCode02').val("""");
                                    $('#txtScanBatchSerial02').val("""");
                                    $('#txtScanBarCode02').focus();
                                    //=========================

       ");
            WriteLiteral(@"                         } else {
                                    alert(""Batch Number does not exist."");
                                    $('#txtScanBarCode02').val("""");
                                    $('#txtScanBatchSerial02').val("""");
                                    $('#txtScanBarCode02').focus();
                                    return false;
                                }

                            }
                        });
        }
                }
                else if (getSelectedValue.value == ""Serial"") {
                     if ($('#txtScanBatchSerial02').val()!='') {

                        $.ajax({
                            url: '");
#nullable restore
#line 1462 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
                             Write(Url.Action("GetStockItemSerialBin", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                            data: { itemcode: $('#txtScanBarCode02').val(), serialnumber: $('#txtScanBatchSerial02').val(), binentry: $('#txtBinName').val()},
                            type: ""GET"",
                            dataType: ""JSON"",
                            ""dataSrc"": 'data',
                            success: function (data) {
                                var jqueryXml = $(data);
                                if (jqueryXml[0].data.length != 0) {
                                    //=========================
                                    var bItemCode = jqueryXml[0].data[0].itemCode;
                                    var bItemName = jqueryXml[0].data[0].itemName;
                                    var bQuantity = document.getElementById(""txtQuantity02"").value;
                                    var bWhsCode = jqueryXml[0].data[0].whsCode;
                                    var bWhsEntry = jqueryXml[0].data[0].whsEntry;
                                    var");
            WriteLiteral(@" bBinCode = jqueryXml[0].data[0].binCode;
                                    var bBinEntry = jqueryXml[0].data[0].binEntry;
                                    var bUOMCode = jqueryXml[0].data[0].uomCode;
                                    var bBatchNumber = jqueryXml[0].data[0].batchNumber;
                                    var bSerialNumber = jqueryXml[0].data[0].serialNumber;
                                    //if (bSerialNumber != '') { bSerialNumber = bSerialNumber } else { bSerialNumber = '' }
                                    var bExpDate = jqueryXml[0].data[0].expDate;
                                    if (bExpDate == '1899-12-30T00:00:00') {
                                        bExpDate = '';
                                    } else {
                                        bExpDate = bExpDate;
                                    }

                                    if ($('#txtScanBarCode02').val() != '') {
                                            t.row.add([
      ");
            WriteLiteral(@"                                          bItemCode,
                                                bItemName,
                                                bQuantity,
                                                bWhsCode,
                                                bBinEntry,
                                                bBinCode,
                                                bUOMCode,
                                                bExpDate,
                                                '',
                                                bBatchNumber
                                            ]).draw(false);
                                    } else {
                                        return false;
                                    }

                                    $('#txtScanBarCode02').val("""");
                                    $('#txtScanBatchSerial02').val("""");
                                    $('#txtScanBarCode02').focus();
                         ");
            WriteLiteral(@"           //=========================

                                } else {
                                    alert(""Serial Number does not exist."");
                                    $('#txtScanBarCode02').val("""");
                                    $('#txtScanBatchSerial02').val("""");
                                    $('#txtScanBarCode02').focus();
                                    return false;
                                }

                            }
                        });


        }
                }
            }
            else {
                return false;
            }

        }

    });
    $('#addRow02').click();

    var input02 = document.getElementById(""txtScanBarCode02"");
    var input12 = document.getElementById(""txtScanBatchSerial02"");
    input02.addEventListener(""keyup"", function (event) {
        if (event.keyCode === 13) {
            event.preventDefault();
            document.getElementById(""txtScanBatchSerial02"").focus();
");
            WriteLiteral(@"            input12.addEventListener(""keyup"", function (event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                    document.getElementById(""addRow02"").click();
                }
            });
        }
    });

    $('#btnResetQty').click(function () {
        $('#txtQuantity01').val('1');
    });

    $('#btnFocusText').click(function () {
        $('#txtScanBarCode01').val('');
        $('#txtScanBarCode01').focus();
    });

    function up(max) {
        document.getElementById(""txtQuantity01"").value = parseInt(document.getElementById(""txtQuantity01"").value) + 1;
        if (document.getElementById(""txtQuantity01"").value >= parseInt(max)) {
            document.getElementById(""txtQuantity01"").value = max;
        }
    }
    function down(min) {
        document.getElementById(""txtQuantity01"").value = parseInt(document.getElementById(""txtQuantity01"").value) - 1;
        if (document.getElementById(""txtQuantity01"").value ");
            WriteLiteral(@"<= parseInt(min)) {
            document.getElementById(""txtQuantity01"").value = min;
        }
    }

    $('#btnDelRow').click(function () {
        t.row('.selected').remove().draw(false);
    });

    function POSTDataAPI() {
        document.getElementById(""frmLoading"").style.display = ""block"";
        var sHead = {};
        var sLine = [];
        var dLine = [];
        var serialLine = [];
        var batchLine = [];
        var arrayLine = {};

        var whsCode = document.getElementById(""txtWhsCode"");
        var binCode = document.getElementById(""txtBinCode"");

        let regex = /\,(?!\s*?[\{\[\""\'\w])/g;
        var str = '';


        if (!t.data().count()) {
            alert('Empty table');
            document.getElementById(""btnSave"").style.display = 'block';
            document.getElementById(""frmLoading"").style.display = ""none"";
        }
        else {
            //Start push
            //Tb = List Data Line
            console.log(""=== List Data Li");
            WriteLiteral(@"ne ==="");
            for (let ctbline = 0; ctbline < tline.column(0).data().length; ctbline++) {
                arrDataLine = {};
                var ldata = tline.row(ctbline).data();

                var productType = """";

                if (ldata.batchYN == ""Y"") {
                    productType = ""b"";
                } else {
                    if (ldata.serialYN == ""Y"") {
                        productType = ""s"";
                    }
                }

                if (ldata.batchYN == ""N"" && ldata.serialYN == ""N"") {
                    productType = ""n"";
                }

                arrDataLine.itemCode = ldata.itemCode;
                arrDataLine.quantity = parseFloat(ldata.quantity);
                arrDataLine.uomCode = ldata.uomCode;
                arrDataLine.whsCode = whsCode.value;
                arrDataLine.binEntry = parseInt(binCode.value);
                arrDataLine.productType = productType;
                arrDataLine.batchYN = ldata.batchYN;
   ");
            WriteLiteral(@"             arrDataLine.serialYN = ldata.serialYN;
                dLine.push(arrDataLine);
            }
            console.log(dLine);


            console.log(""=== List Data Scan ==="");
            //Tb = Data Line From Scan BarCode
            for (let rr = 0; rr < t.column(0).data().length; rr++) {

                arrayLine = {};
                var data = t.row(rr).data();
                var productType = """";
                var batchSerialNo = """";

                console.log('Date pure....');
                console.log(data);

                if (data[8] != """") {
                    productType = ""b"";
                    batchSerialNo = data[8];
                } else {
                    if (data[9] != """") {
                        productType = ""s"";
                        batchSerialNo = data[9];
                    }
                }

                if (data[8] == """" && data[9] == """") {
                    productType = ""n"";
                    batchSerialNo ");
            WriteLiteral(@"= 'non' + data[0];
                }

                arrayLine.itemCode = data[0];
                arrayLine.quantity = parseInt(data[2]);
                arrayLine.whsCode = data[3];
                arrayLine.binEntry = data[4];
                arrayLine.uomCode = data[6];
                arrayLine.productType = productType;
                arrayLine.batchNumber = data[8];
                arrayLine.serialNumber = data[9];
                arrayLine.batchSerialNo = batchSerialNo;
                sLine.push(arrayLine);
            }
            console.log(sLine);

            console.log(""Grouping..."")
            //Group batchSerialNo
            const groupBy = sLine.reduce((acc, cur) => {
                acc[cur.batchSerialNo] ? acc[cur.batchSerialNo] = {
                    ...acc[cur.batchSerialNo],
                    quantity: acc[cur.batchSerialNo].quantity + cur.quantity
                } : acc[cur.batchSerialNo] = {
                    ...cur
                };
             ");
            WriteLiteral(@"   return acc;
            }, {});
            const output = Object.values(groupBy).map((item) => ({
                ...item
            }));
            console.log(output);

            const data2 = dLine;
            //===========================================================
            arrDataLineB = {};
            arrDataLineS = {};
            arrDataLineM = {};
            arrDataHead = {};
            arrLineAll = [];

            var cSerialNo
            var sumQTY = 0;
            for (let x = 0; x < data2.length; x++) {
                //arrDataHead = {};

                var serialbox = [];
                var batchbox = [];
                for (let y = 0; y < output.length; y++) {
                    //arrDataLineS = {};
                    //
                    //console.log(data2[x].itemCode + '==' + output[y].itemCode);
                    if (data2[x].itemCode == output[y].itemCode) {
                        arrDataLineS = {};
                        arrDat");
            WriteLiteral(@"aLineB = {};

                        if (output[y].productType == 'b') {
                            arrDataLineB.itemCode = output[y].itemCode;
                            arrDataLineB.quantity = output[y].quantity;
                            arrDataLineB.batchNumber = output[y].batchNumber;
                            batchbox.push(arrDataLineB);
                            serialbox = [];
                            sumQTY = sumQTY + output[y].quantity;
                        }


                        if (output[y].productType == 's') {
                            arrDataLineS.itemCode = output[y].itemCode;
                            arrDataLineS.quantity = output[y].quantity;
                            arrDataLineS.serialNumber = output[y].serialNumber;
                            serialbox.push(arrDataLineS);
                            batchbox = [];
                            sumQTY = sumQTY + output[y].quantity;
                        }

                        if (output");
            WriteLiteral(@"[y].productType == 'n') {
                            sumQTY = sumQTY + output[y].quantity;
                        }


                        //console.log(output[y].quantity + ""->"" + sumQTY);

                        arrDataHead.itemCode = data2[x].itemCode;
                        arrDataHead.quantity = sumQTY;
                        arrDataHead.uomCode = data2[x].uomCode;
                        arrDataHead.whsCode = data2[x].whsCode;
                        arrDataHead.binEntry = data2[x].binEntry;
                        arrDataHead.productType = data2[x].productType;
                        arrDataHead.batchLine = batchbox;
                        arrDataHead.serialLine = serialbox;

                    }
                    else {
                        arrDataHead = {};

                        arrDataHead.itemCode = data2[x].itemCode;
                        arrDataHead.quantity = sumQTY;
                        arrDataHead.uomCode = data2[x].uomCode;
                      ");
            WriteLiteral(@"  arrDataHead.whsCode = data2[x].whsCode;
                        arrDataHead.binEntry = data2[x].binEntry;
                        arrDataHead.productType = data2[x].productType;
                        arrDataHead.batchLine = batchbox;
                        arrDataHead.serialLine = serialbox;

                    }


                }
                console.log(arrDataHead);
                arrLineAll.push(arrDataHead);

                sumQTY = 0;
                arrDataHead = {};


            }
            //===========================================================

            //Header_Document
            //console.log(arrDataAll);
            sHead.series = $('#txtSeries').val();
            sHead.countingDate = $('#txtCountingDate').val();
            sHead.countingTime = $('#txtCountingTime').val();
            sHead.ref2 = $('#ref2').val();
            sHead.comments = $('#comments').val();
            sHead.line = arrLineAll;
            console.log(""Json Complete.");
            WriteLiteral(".\");\r\n            console.log(sHead);\r\n\r\n             $.ajax({\r\n                type: \"POST\",\r\n                url: \'");
#nullable restore
#line 1786 "D:\VB\BarCode-System\BarCodeClientService\Views\Inventory\CreateInventoryCounting.cshtml"
                 Write(Url.Action("PostInventoryCounting", "Inventory"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                data: { sendInventoryCounting: sHead },
                dataType: ""JSON"",
                success: function (ex) {
                    //console.log(ex);
                    if (ex.errorCode == 0) {
                        alert(""Success"");
                        document.getElementById(""btnSave"").style.display = 'none';
                        document.getElementById(""frmLoading"").style.display = ""none"";
                        location.reload();
                    } else {
                        console.log(ex.errorMsg);
                        alert(ex.errorMsg);
                        document.getElementById(""btnSave"").style.display = 'block';
                        document.getElementById(""frmLoading"").style.display = ""none"";
                    }
                }
            });
            //End push
        }




    }



</script>

");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
